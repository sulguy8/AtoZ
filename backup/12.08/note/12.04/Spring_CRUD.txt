////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 
1. 스프링 프로젝트를 만들고 서버를 통해서 home에 잘 접속이 되는지 확인할 것.

2. pom.xml에 필요한 것들을 넣고 해당 프로젝트 update 할 것.

3. web.xml을 확인하고 listener와 init-param타는 것들을 확인할것
	a. root-context.xml : DBCon과 작성과 더불어 mybatis셋팅, 맵핑에 관련되어있는 xml 만들기.
	b. servlet-context.xml : ViewsController에서 했던 것들. <context : component-scan base-package="경로 잘 지정해주기"> 

4. com.sp.bdi에 Controller, Service, DAO, VO 작성하고 ARC로 테스트해보기

5. Filter(생성하고 web.xml에 filter가 잘 추가됐는지 확인!) 작성하기. 화면할때는 filter꺼놓고 할것. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 화면 구현
res 만들고 테스트해보기(파일 대소문자 가릴것.)
6. head, header만들기
7. web.xml에서 prelude
8. res확인해보기


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

* RequestBody가 없다면 return값은 url주소가 됨.

*conf, head ,common, config 있으면 가장먼저 볼 것! xml을 보면 모든셋팅들이 잘 들어가있음.

* userVO에서 타입알리아스를 사용하고 싶다면 mybati-config에서 타입알리아스 설정하면됨.

* <resources mapping="/res/**" location="/resources/" /> // WebContent(Web-inf는 접근 못하는 폴더였잖아. 이건아님.) 
	폴더 우리가 예전에 쓰던 공통적인 폴더. url로 따로 안타도 들어갈수 있었던 폴더. mapping은 우리가 줄여쓸수 있는 url

* 우리는 원래 return에 url로 태워서 보냈었다. 하지만 json기반으로 jsp에쏴줄땐? 데이터타입 앞에다가 @붙여주면됨.
	public @ResponseBody List<UserVO> getUserList(){
		return us.getUserVOList();
** 부가적으로 jackson library 추가가 필요함.

* RequestMapping
@Controller
@RequestMapping("/test")
public class TestController {
	@RequestMapping(value="/prac", method=RequestMethod.GET)
	public @ResponseBody Map<String,String> test(){
		Map<String,String> rMap = new HashMap<String,String>();
		return rMap;
	}
	
} // localhost/test/prac 하위 url까지 작성가능

* log4j.xml
	<!-- Application Loggers -->
	<logger name="com.sp.bdi">
		<level value="debug" />
	</logger> // Loggers의 단계를 debug단계까지 내려버리기 * 아무때나 debug쓰는 것아님!!
** DEBUG: com.sp.bdi.dao.UserInfoMapper.selectUserInfoList - ==>  Preparing: select*from user_info // DEBUG로 단계를 낮춰줬기때문에 쿼리문도 보임.

* jsp에서 보내는 형태가 
1. form태그(xxx-form-urlencodede)
2. 파일이 있는 form태그(multi data)
3. json인지 잘 구분해서 사용할 것.
** RequestBody // json 받을때. 이거는 "jackson"을 받아야지 됨. 
*** xhr.setRequestHeader('Content-Type','application/json'); json화 해줘야 payload! 즉,json은 payload형태로 보냄.
** test(@ModelAttribute UserVO param) // xxx-form-urlencodede Form 형태로 보내야 함

* test(@RequestParam Map<String,String> param) // Map같이 컴퓨터가 정한 참조형 타입일때
** test(@ModelAttribute UserVO param) // xxx-form-urlencodede Form 형태로 보내야 함. 우리가 임의로 정한 참조형 데이터 타입일때(@ModelAttribute 생략가능)

* jstl에서는 어쩔수 없이 메인 컨트롤러에서 페이지를 타서 동기화를 시켜야하지만, ajax기반에서는 공통적으로 받는 서블릿으로 페이지 이동시키는 게 편함.

* 체크박스는 or조건으로 해야돼서
where 
ui_id like '%gold%'
or
ui_id like '%gold%'
or                         
ui_id like '%gold%'  	

<foreach collection="search" item="col" seperator="or">  // seperator="or"는 ${col} like '%' || #{searchStr} || '%' 끝나고 or를 자동으로 붙여줌.
	${col} like '%' || #{searchStr} || '%'
</foreach>

* pom.xml
<artifactId>bdi</artifactId> //  이게 컨텍스트 루트 디폴트값

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>

					<wtpContextName>/</wtpContextName>	// 이거 추가하고 메이븐업데이트하면 루트패스가 / 로 바뀜.
				</configuration>

@Model만 생략가능, @reqparam, @reqbody는 표기해줘야함.

* 원래 form태그방식으로 model받을수 있는데 json방식으로는 requestbody로 받아야함.

* select(단일), update와 delete는 보통 pk값을 받음.

* dbcp가 알아서 커밋해줌

* td.innerHTML = brd[0][key]; // view.jsp 여기는 노드리스트로 받기때문에 방번호가 필요했었음..

* url 패턴과 주는 것과 받는 방식 잘 구분해야함!

* delete를 배열형태로 uiNums을 받아서 여러개 삭제해보기

* userdaoimpl
public int deleteUserInfos(UserVO user){
	SqlSession ss = ssf.openSession(false);
	try{
		int cnt = ss.delete("com.sp.bdi.dao.UserInfoMapper.deleteUserInfo", user);
		if(cnt!=user.getUiNums().length){
			ss.rollback();
			return 0 ;
		}
		ss.commit();
		return cnt;
	} catch(Exception e){

* public @ResponseBody List<UserVO> login(@RequestBody UserVO user, HttpSession hs){ // 이렇게만 해줘도 session에 있는 값을 전부가져옴.

* filter > web.xml
  <filter-mapping>
    <filter-name>SessionFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> // url pattern은 "/*" 하던가
서블릿에다 
@WebFilter("/*") 해도되는데 이거는 스프링버전 3부터(지금 우리는 2.5) 

* 단순한 서버이동(/views),비즈니스 로직(/user/list같은)으로 나뉨.

* 헤더값을 임의로 만들땐 x를 붙임. x를 보면 "아 원래 있는건 아니고 새로만든거구나!" 라고생각하면됨.

* 세션에 아이디값이 없을때 이셉션 내주는 것도 중요함. throw로 이셉션내는것보다 json으로 printwrite해서 보내는게 알아먹기 쉽고 깔끔하긴함.

* 필터도 대표적인 AOP방식이라 할 수 있다.
























