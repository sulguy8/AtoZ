https://www.youtube.com/watch?v=PZIPsKgWJiw&list=PLuHgQVnccGMA4uSig3hCjl7wTDeyIeZVU

객체지향 프로그래밍!!

# 3
Window, Mac Os에서 콘솔사용법, 크롬 개발자 도구

# 4 실행과 실습 (3/3) : 도구의선택
* Sublime Text(IDE 사용법), 좋은도구를 찾는 노력을 게을리 하지 말 것!

# 5 숫자와 문자 (1/4) : 수의 표현
* 정수와 실수

# 6 숫자와 문자 (2/4) : 수의 연산
* Math.pow(3,2); // 3의 2승
* Math.round(10.6); // 반올림
* Math.ceil(10.2); // 가장 가까운 정수에 올림.(반올림과 다름) <-> Math.floor 내림.
* Math.sqrt(9); // 제곱근
* Math.round(100 * Math.random()); // 소숫점 없이 랜덤값 구하기

# 7 숫자와 문자 (3/4) : 문자의 표현
* SyntaxError : Unexpected token Illegal // 문법에러 : 유효하지 않은 문장이 나왔다.
* alert('egoing\'s coding everybody'); // \ escape라고 부름
* typeof 1 // 데이터타입을 아는방법

# 8 숫자와 문자 (4/4) : 문자에 대한 명령들
* \n은 줄바꿈
* opentutorials.org/course/50/37 // 자바스크립트 함수들

# 9 변수 (1/2) : 사용법

# 10 변수 (2/2) : 변수의 효용

# 11 주석
* 가장좋은 코드는 주석도 필요없이 이해할 수 있는 코드
* 내가 짰더라도 3개월 뒤에는 나의 코드가 아님. 즉 미래의 타인이 될 날 위해 주석을 다는 습관을 들일 것. 

# 12 줄바꿈과 여백
* 자바스크립트에선 ; 생략가능. 줄바뀌면 끝난것으로 앎.

# 13 비교 (1/4) : 연산자란?
* = : 대입 연산자
  == : 비교 연산자

# 14 비교 (2/4) : ==과 ===
* == : 동등 연산자(equal operator) 		// ex) '1' == 1 (true)
* === : 일치 연산자(strict equal operator)	// ex) '1' === 1 (false) 따라서 이것을 쓰자! 동작할때 오류가 발견되는 것보다 코딩할때 발견되는 것이 더 나음.

# 15 비교 (3/4) : ===를 사용하자!
* undefined : 정의되지 않은, 프로그래머가 의도하지 않은 상황
* null : 값이 없는데, 프로그래머가 값이 없는상태를 의도적으로 유도함.
* 0이 아닌 값들은 true. 0이면  false
* NaN은 0/0같이 계산할 수 없는 것. 따라서 NaN === NaN 은 false. 
* https://dorey.github.io/JavaScript-Equality-Table/ 참고

# 16 비교 (4/4) : 부정과 부등호

# 17 조건문(1/5) : 조건문이란

# 18 조건문 (2/5) : else, else if
* if는 else if, else 까지 합쳐서 true 1번만 작동한다.

# 19 조건문 (3/5) : 조건문의 응용
* prompt('당신의 나이는?');

# 20 조건문 (4/5) : 논리 연산자
* (true && true && false)  이런 형태로 구성되어야 함.
* || 조건문은 결국 (true) 이런 형태로 구성됨.  

# 21 조건문 (5/5) : boolean의 대체재
* if(0) {alert(1);}  if('') // 자바스크립트에서는 숫자0이나 비문자열 ' ', null, undefined는 false로 간주한다. 
* if(1) {alert(1);} // true
* https://dorey.github.io/JavaScript-Equality-Table/ 참고

# 22 반복 (1/6) : 기본문법
* loop, iterate를 반복문이라고 함.
* while(true) { } // while반복문은 false가 될때까지 반복된다.

# 23 반복 (2/6) : 반복조건

# 24 반복 (3/6) : for문

# 25 반복 (4/6) : 반복문의 효용

# 26 반복 (5/6) : 반복문의 제어 (break,continue)
* 1~10 사이에 5에서 멈추고 싶으면 break; // 그 순간이 오면 모든 반복문을 종료시킴
* 1~10 사이에 5를 제외하고 싶으면 continue; // 그 순간으 반복문만 종료시키고 반복문을 계속돌림

# 27 반복 (6/6) : 반복문의 중첩

# 28 함수 (1/5) : 함수란?

# 29 함수 (2/5) : 함수의 효용
* Reuse(재사용성), maintenence(유지보수), 가독성 제고

# 30 함수 (3/5) : 입력

# 31 함수 (4/5) : 출력

# 32 함수 (5/5) : 다양한 정의 방법
* numbering = function(){ } 과 function numbering(){ }은 같다.
* (function () { })(); // 정의와 동시에 바로 호출됨. 따라서 이름이 없기때문에 "익명함수"라고 부른다.

# 33 배열 (1/5) : 배열의 문법
* 배열은 index(색인), elements(원소)으로 구성되어있다.

# 34 배열 (2/5) : 배열의 효용
* alert(arr()[1]);

# 35 배열 (3/5) : 배열과 반복문의 조우
* 내장객체와 사용자정의객체

# 36 배열 (4/5) : 데이터의 추가
* li.push('f'); // 배열의 종료지점에 추가하기
* li.unshift('z'); // 배열의 시작지점에 추가하기
* li.concat(['f', 'g']); // 일시적으로 덧붙이기. 값은 추가되지 않는다.
* li.splice(1,0,'d') // 1번방 왼쪽에 d라는 값을 추가하기
  li.splice(1,1,'d') // 1번방 삭제하고 d라는 값을 추가하기

# 37 배열 (5/5) : 제거와 정렬
* li.shift(); // 0번방 제거
* li.pop(); // 마지막방 제거
* li.sort(); // 올림차순으로 정렬
* li.reverse(); // 내림차순으로 정렬

# 38 객체 (1/3) : 객체의 문법
* 객체(Object)는 index로 우리가 여러 데이터타입으로 정할 수 있다. key와 value로 구성. 그냥 Map이네.
* grades = { 'egoing' : 10 }  
* grades['egoing'] = 10; // 이런식으로 객체를 만들 수 있음
* grades['egoing'] // 호출할 때 
** grades.egoing // 이것으로도 호출 가능

# 39 객체 (2/3) : 객체와 반복문의 조우
* for(var key in grades){ // 여기서 key는 key값을 가지게 됨.
	console.log(grades[key]); // 여기서 grades[key]는 value값을 가지게 됨.
   }
	$.ajax({
		url:'/tests',
		method:'GET',
		success:function(res){
			var html = '';
			for(var list of res.list){			// value값만 가져오고 싶을때
				console.log(list);
				html += list + '<br>';
				html += list.tiNum + '<br>';
				
			}

			var str = '';
			for(var ex in res.list){			// key랑 value값 둘다 갖고오고 싶을때
				console.log(ex);
				str += ex;
				str += '추가요! <br>';
				str += res.list[ex].tiNum + '<br>';
			}
			
			document.querySelector('#pageInfo').innerHTML = html;
			document.querySelector('#pageInfo2').innerHTML = str;
		}
	})	
# 39 객체 (2/3) : 객체와 반복문의 조우

# 40 객체 (3/3) : 객체지향 프로그래밍
* 객체 안에는 키마다  키값으로 다양한 데이터형식들이 들어올수있다. 또한 키값으로 다시 키와 키값을 가진 객체가 들어올 수 있다. 호출할땐 이차원 배열로
* this란 함수가 속해있는 객체를 가르키는 변수이다.

# 41 모듈 (1/5) : 모듈이란?
* 하나의 코드를 여러 객체에서 사용하는 것.
* 함수보다 더 큰 개념. 재활용성의 목적은 같다.
* 호스트 환경 : 웹브라우저, node.js, google apps script등등의 서버 시스템

# 42 모듈 (2/5) : 모듈화

# 43 모듈 (3/5) : Node.js의 모듈화
* 웹브라우저에서 작동하는 자바스크립트는 클라이언트쪽 자바스크립트
* Node.js는 서버쪽 자바스크립트
* 다른환경에서는 모듈을 로드하는 방법이 다르구나!
var circle = require('./node.circle.js'); // node.js의 모듈을 불러오는 방법

# 44 모듈 (4/5) : 라이브러리란?
* 자주 사용하는 로직들을 재사용하기 편하게 하기 위해 정리한 일련의 코드들의 집합. 모듈과 크게 다르진 않다.
* 라이브러리는 어떠한 목표를 선정해놓은 로직들의 집합. 웹페이지를 쉽게 제어한다거나, 서버와 쉽게 통신한다거나
* 그중 하나가 jQuery
* API는 jQuery가 제공하는 명령어들의 list. 그 파일 설명서를 API Document라고 한다.

# 45 모듈 (5/5) : 라이브러리의 사용

# 46 UI,API 그리고 문서 - (1/2) : 수업소개
* Application Programming Interface 와 User Interface
공통점 : interface
차이점 : Application과 User

UI : 사용자를 대면하고 의중을 전달하는 접점이 되는 지점. 이를 User Interface라고 부른다. 물리적인 것과 소프트웨어 적인 것으로 나뉨
API : 코드의 형태를 띠고있고 사용자의 의중이 전달되는 것.

사용자 > 웹 개발자 > 브라우저 > 운영체제 > C,C++, JAVA > 어셈블리어 > 기계어 // 이와 같이 뒤집혀진 피라미드 구조로 Interface를 누리고 있다.