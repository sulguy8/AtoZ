package study01.test13;

public class ListTest {

	private String[] strs;					스트링 배열 선언! 

===============================================================	
	public ListTest() {					생성자에 배열 추가.
		this.strs = new String[0];			str을 쓰는 배열은 0개의 방 갯수
	}

===============================================================
						#1 메인메소드에 입력된 arg들을 방 순서에 따라 add하기 위해
	public void add(String str) {				
		String[] tmpStr = this.strs;			// tmpStr 배열은 this.strs 배열로 치환한다.
		this.strs = new String[this.strs.length+1];  	// this.strs는 원래 0개의 방을 가진 배열이었는데 초기화를 해서 생성자에 선언된 방 길이에 +1, 즉 this.strs = new String[1], 따라서 1번째 방이 만들어졌다.  
		this.strs[this.strs.length-1] = str;		// this.str에 메인메소드에 str값을 가져오려면 방을 0번째 방부터 생성해야 함. 따라서 this.strs.length+1은 1이니 다시 -1해줘서 0번째 방에 str을 넣어줌. 
		for(int i=0; i<tmpStr.length; i++) {		// 추가로 더해지는 메소드 호출들을 위해 for문을 이용함.
			this.strs[i] = tmpStr[i];		// 스왑을 이용해서 다시 this.strs[i]는 tmpStr[i]로 치환된다.
									** 따라서 메인 메소드의 lt.add("a");라는 메소드 호출시 
							           	초기값 0개의 방밖에 없었던 this.strs는 마지막 라인으로 인해 
									***this.strs[0] = "a";*** 로 바뀐다.
										

		}
	}	
						#2 [ , , ]를 넣기 위해
	public String toString() {				// toString을 쓴 이유는 System.out.println(lt)할 때 밑에 썼던 메소드의 결과 값들을 전부다 갖고오기 위해서.
		String str = "[";				// str이라는 변수에 "["라는 변수값 할당
		for(int i=0; i<strs.length; i++) {		// 0번째 방부터 2번째 방까지 
			str += strs[i] + ",";			// str, 즉 대입값 다음마다 ","를 붙여줌
			
		}	
		str = str.substring(0,str.length()-1);		// 마지막으로 붙는 c의 요소값 다음에 ","를 제거하기 위해 사용
		str += "]";					// str 변수는 끝이 날때마다 마지막에 "]"붙여줌
		return str;					// str의 값이 String toString의 리턴값됨.
									** lt를 콘솔에 출력하게 된다면 ***a,b,c***로 출력되는 것들이
									[a,b,c]로 출력하게 됨.
	}
	
	public int indexOf(String str) {			
		for(int i=0; i<strs.length; i++) {
			if(str.equals(strs[i])){
				return i;
			}
		}
		return -1;
	}
						#3-1 String을 받는 remove메소드를 사용하기 위해
	public void remove(String str) {				
								// 만약 remove(string값의 a)가 호출이 된다면
		int idx = indexOf(str);				// idx라는 변수는 int idx = indexOf(a) 로 치환됨. a는 0번째 방에 있기 때문에 int idx = 0;	
		if(idx!=-1){					// idx는 -1이 아니고 0이기 때문에(-1은 절대 나올 수 없는 숫자라 사용) if문 가동 // idx는 lt.add("a"),("b"),("c")로 0,1,2로 치환
		remove(idx);					// remove(0); 즉 0번 방을 지워라.
								** 따라서 lt.remove("a")를 콘솔에 출력하게 된다면 remove(0)이기 때문에 b,c만 출력됨. 
		}		
	}
						#3-2 int를 받는 remove메소드를 사용하기 위해
	public void remove(int idx) {				// remove 메소드는 int형의 idx라는 파라미터 int, 즉 숫자를 값으로 받으면서 그 값을 idx로 치환함. 밑에 lt.remove(1);인해 1이 대입됨.	
		String[] tmp = strs;				// String의 tmp배열은 strs라는 변수명으로 치환함. 클래스 영역에 String[] str = new String[0]; 이라고 선언되어있지만 lt.add("a");가 있기 때문에 String[] str = new String[1]로 0이라는 이름의 방 1개를 만듬
		strs = new String[strs.length-1];		// str[1(str.length)-1]를 해줌으로써 strs[1] 0이라는 이름의 방을 만들어줌.
		for(int i=0; i<idx; i++) {			// 1을 아규먼츠를 받았기 때문에 idx = 1. 따라서 i는 0으로만 동작.
			strs[i] = tmp[i];			// strs[0] = tmp[0]과 같다. strs[0]의 1개의 방을 만들어줬기 때문에 tmp[0]의 1개의 방도 존재할 수 있는 것.
		}
		for(int i=idx+1;i<tmp.length;i++) {		// int i = 1(idx)+1 = 2 로 치환되어 tmp의 length, 즉 0보다 
			strs[i-1] = tmp[i];
		}
	}
	
===============================================================
		public static void main(String[] args) {			
			ListTest lt = new ListTest();						
			lt.add("a");
			lt.add("b");
			lt.add("c");				
			lt.remove(1);
	
			System.out.println(lt);			
		
	
		
	}
} 