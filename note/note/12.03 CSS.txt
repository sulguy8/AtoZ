/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. pom.xml 채우기
spring-boot-devtools, tomcat-embed-jasper, jstl, lombok, mybatis, mybatis-spring

2. vo(Alias 설정), dao(인터페이스로), controller 채운뒤에 SbTest @MapperScan 경로 지정하기

3. application.properties 채우기(#server port, #Datasource, #HikariCP, #mybatis

4. resources폴더에 mybatis-config랑 mapper 만들기

5. webapp에 res, WEB-INF 만들고 접근 확인한 뒤에 화면구현하기


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


* ctrl+~ cmd // 를 열지않고 vscode에서 바로 실행가능.
Html : 벽돌, 구조물
css : 형용사적인 정의

* css, 반응형 페이지.

* css 선택자 
셀렉터 + 선언블록(프로퍼티+값)

** 자식, 손자 선택자
>는 바로 하단(자식)
" "공백은 그것을 포함한 모든요소.(자식+손자)





* element 요소의 범위를 알것. 하나의 요소가 여러개의 요소를 포함

* 어트리뷰트(속성) : 하나의 요소에 속성을 부여하여 이러한 요소가 ~를 갖고있다를 부여

이것이 css에서 중요한 요소로 꼽힘.

* html페이지에서 !누르고 emmet? 이거누르면 처음시작이 다나옴.

* div*5, w1000, bg, lorem*100(임의의 텍스트)

* 블록요소 : div가 기본적으로 갖음. 컨텐트, 한공간에 다른 div가 올 수 없음.
* 인라인요소

* margin:상 우 하 좌 , 상 하 , 좌 우

* 우선순위 제일 최하단

* float : 요소들을 전부다 왼쪽으로 정렬. float을 정의안해준 요소들과 섞일수 있음 "clear :both;" 이걸해줘야 그이후에 문제점을 잡을 수 있음

* wrap을 상속받아서 아랫것들이 전부 변함
    <style>
        #wrap { font-size: 40px; color : #fff; text-transform : uppercase; width: 1000px; height: 1000px; background: #999;}
        #header {width: 1000px; height: 100px; background: #888;}
        #side-l {float : left; width: 150px; height: 800px; background-color: #777;}
        #content {float : left; width: 700px; height: 800px; background-color: #666;}
        #side-r {float : left; width: 150px; height: 800px; background-color: #555;}
        #footer {clear :both; width: 1000px; height: 100px; background-color: #444;}
    </style>

* https://webzz.tistory.com/225 여기서 어떠한 요소로 사용됐는지 알 수 있음(블록요소,인라인요소 등등..)

* box-sizing: border-box // 다른 수치들을 변경안해줘도됨. 작업성을 제고한다.

* 헤더
네비게이터
컨테츠
풋츠


* css 숙제!


전체를 wrap으로 묶고 
헤더 가입신청
텍스트 박스 인풋박스 선언

float right

1.컨텐츠
div에 백그라운드, 폰트컬러들어가고
전체를 잡고 패딩을 먹임

2.컨텐츠

3.컨텐츠

box sizing

* Spring Boot Developer Tools ≫ 2.2.1.RELEASE 이거 pom에 추가할것. // 서버를 안껐다켜도 바로 업데이트해준다.

* @RestController 이거는 view를 바라볼 수 없다. 대신에 responsebody를 알아서 해줌.
* @GetMapping("/") // @RequestMapping의 method와 같다. 3.x이하는 못씀

* jsp el태그 > 자바스크립트 el태그(맨 상단에 설정해줘야하며 " ` " 이걸로 묶어주면 자바스크립트 el태그 형태임)



	<bean id="bds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method ="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="bdi"/>
		<property name="password" value="12345678"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>	

* mybatis 첨에 배울땐 initservlet에서 했는데 지금은 bean로 했잖아.

JAVA
Tomcat + jsp
jstl
maven
mybatis
이단계로 지금껏 CRUD구현해옴. 만드는 방식 다알아야함.

* Connection pool : 상담사가 4명인데 갑자기 5명이 몰린다면? 이러한 문제를 해결하기위해 DB에선 connection pool이라고 함. 4명이 다같이 하는게 아니라 각자 일을하는 것.
내려갈수록 속도가 더빠름
DBCP 
DBCP2
HikariCP // 여기에 cp가 connection pool
몇개나 만들건지? time out은 얼마나 설정할건지

spring.datasource.hikari.minimum-idle=4 // 상담사 4명만 둬라. 유효자원을 아끼기위해서 적당히 하는게 좋음.
spring.datasource.hikari.maximum-pool-size=8 // 이게 초과됐을때는 기다리게하는 것.

* dao
** <mapper namespace="com.bdi.sb.dao.UserInfoMapper"> // 이거가 dao의 userinfoMapper의 namespace 경로가 맞아야됨.
** public List<UserInfoVO> selectUserInfoList(UserInfoVO ui); // 메소드 명이 user-info.xml과 일치해야함.

@ Resource // 4.x버전 이상부터. Autowired와 비슷하다.