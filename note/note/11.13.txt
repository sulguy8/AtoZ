* function ajax(conf){
	console.log(conf);
	var xhr = new XMLHttpRequeest();
	xhr.open(conf.method.conf.url);
}

var conf = {
method :'GET',
url :'/views/jsp'
}

ajax(conf);

* 자바스크립트에는 var, string, number, function 중 하나.
* 자바스크립트에서 펑션의 파라미터는 있어도그만, 없어도그만! "option"이다!
* 자바스크립트는 같은 스크립트 영역의 펑션을 싹 읽고 호출문들을 실행하기때문에 아래에 펑션을 작성해도 위에서 호출할 수 있다.
* 따라서 스크립트 구역에 따라 순서대로 실행됨.
 
하지만 
test();  // 이거는 안됨! 아래가 변수라 변수라고 인식해야하기때문에
var test = function(){ // var가 펑션으로 바뀌는 순간! 그때 펑션으로 인식함.
alert(1);
}


var conf = {
	str :'난 conf꺼'
	func : function(){
		alert('나도 conf 꺼');
	}
}
alert(conf.str);
conf.func();

* jspf는 캐시를 한번저장하면 그것만 불러옴 따라서 시크릿크롬(캐시를 저장하지않음) 실행하던가 or 크롬캐시날려야 하지만!
head.jsp 파일에 <script src="${jsPath}/common.js?ver=1"></script> ?ver=n를 넣어서 버전을 다르게 함. 이건 편법임.
** jstl로 변수만들어준다음에 한꺼번에 바꾸는 방법도 있음!
<c:set var="ver" value="1.0.1"/> 
<script src="${jsPath}/jquery-3.4.1.js?ver=${ver}"></script>
<script src="${jsPath}/bootstrap.js?ver=${ver}"></script>
<script src="${jsPath}/bootstrap.bundle.js?ver=${ver}"></script>
<script src="${jsPath}/common.js?ver=${ver}"></script>
<link rel="stylesheet" href="${cssPath}/bootstrap.css?ver=${ver}"/>
<link rel="stylesheet" href="${cssPath}/bootstrap-reboot.css?ver=${ver}"/>
<link rel="stylesheet" href="${cssPath}/bootstrap-grid.css?ver=${ver}"/>

* var inputs = document.querySelector('#biTitle'); // # 뒤에id=biTitle 로 보면됨. = document.getElementById("biTitle)
* var inputs = document.querySelector('[id]'); // 속성중에 id있는 것을 갖고와라. id가 여러개라면 제일 먼저의 것을 가져옴.
* var inputs = document.querySelectorAll('[id]'); // id를 전부다 갖고와라

* 자바스크립트의 for문은 세가지가있다.
var arr =['a','b','c'];
** for(var i=0;i<arr.length;i++){
	var ar = arr[i]
	console.log(ar); // 우리가 알던것
}
** for(var i in arr){
	var ar= arr[i]
 	console.log(ar;
}	// 맵구조라도 키가 순서대로 나와서 뽑을 수 있다. "for in"문
** for(var ar of arr){
	console.log(ar);
}	// 자바의 향상된 for문과 똑같음 "for of"문

***
	var arr = ["dog","cat","fish"];
	
	for(var i=0;i<arr.length;i++){
		console.log(arr[i]);
	}
	for(var i in arr){
		console.log(arr[i]);
	}
	for(var animal of arr){
		console.log(animal);
	}

* 자바스크립트에서 if(input.id){ // if문 안에 있는것들은 값이 있으면 "true", 없으면 "false".

* var a ='' "or" null "or" 선언만; // if에 부정연산자를 썼으니 없으면 true.
if(!a){
 alert(1)
}

* post에서는 ?로 전달안하고 send로 전달한다

* 삼항연산자
	var param = (conf.param)?conf.param:''; // a?b:c // a가 true면 b, false면 c  /// 따라서 conf.param에 값이 0,null,'' 이면 false. 값이 있어야 true
	xhr.send(param); 
* var animals = [] 이거는 "리스트". 순서만 중요함. 키값이 없음. 
  var ani = {
 	name : "강아지" 
  }		// 자바의 맵과 비슷한 "구조체".

* 2가지의 차이점은? 	
 	alert(animals[0].name); 
	alert(animals[0]['name']); // 2차원 배열과 가까움.

* var ani={};  		=	Map<String,String> map = new HashMap<>();
  var anis=[];		=	List<Map<String,String>> list = new ArrayList<>();
  anis.push(ani); 	= 	list.add(map);
  ani.name = '고양이'; 	= 	map.put("name","고양이");
  console.log(anis) 	= 	System.out.pritnln(list);

* var divs = document.querySelectorAll('div'); // div라는 태그의 값을 전부가져와라

* var hobby = "축구";

var inputs = document.querySelectorAll('input');
for(var input of inputs){
	if(input.name=='hobby' && input.value==hobby){
		input.checked = true;
	}
}

* var btn = document.querySelector('button');
btn.onclick = function(){
	alert(1);
} 

는 같다! 
<button onclick = 'click()'>클릭</button>
의 스크립트
function click(){
	alert(1);
}  // onclick으로 하는 것보다 요새 추세는 스크립트에 시그널을 넣어서 불러오는 것.

* 자바스크립트에서 리스트는 데이터타입이 유동적이기 때문에 각방에 여러가지 타입을 넣을 수 있다. 만약 그 안에서
  키값을 가진 구조체의 밸류를 가져오고 싶다면 ['key']를 이용하자.
