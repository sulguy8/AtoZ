* 파일을 배포하고싶다면.

DiskFileItemFactory dfif = new DiskFileItemFactory(); 		// 공장을 짓고
dfif.setSizeThreshold(memSize);				// 효율성을 위해 기계마다 할당량을 분담시키고 
dfif.setRepository(new File(System.getProperty("java.io.tmpdir"))); 	// 임시로 쟁겨놓을 창고를 지정
ServletFileUpload sfu = new ServletFileUpload(dfif);		// 기계의 스위치를 올리고
sfu.setFileSizeMax(fileSize);					// 내용물이 들어갈 박스 크기
sfu.setSizeMax(totalSize);					// 수용가능한 박스의 양

if(ServletFileUpload.isMultipartContent(request)) {		// 요청이 들어왔나? 왔으면 true!
	try {
		List<FileItem> fList = sfu.parseRequest(request);		// 요청을 리스트에 담고
		Map<String,Object> param = new HashMap<>();	// 키와밸류를 담을 맵을 만들고
				
		for(FileItem fi:fList) {				// 리스트를 하나씩 읽어보자
			String key = fi.getFieldName();		// key에다가 jsp에서 입력한 키를 입력
			if(fi.isFormField()) {				// 만약에 키밸류가 있다면?
				String value = fi.getString("utf-8");	// 그것은 utf-8로 받을거고
				param.put(key, value);		// 맵에다가 키와 밸류로 저장!
			} else {
				param.put(key, fi);			// 키밸류가 file형식이면 이쪽으로
			}
		}
		fts.insertFileTest(param);			// 서비스로 보내자
	} catch (FileUploadException e) {
		e.printStackTrace();
	}

} else {
	throw new ServletException("파일 형식이 잘못되었습니다.");
}

* mybatis-config에도 잘 추가했었는지 확인해보자 ㅠㅠ

*     public EncodingFilter() {
    	excludePatterns.add(".js");
    	excludePatterns.add(".css");
    	excludePatterns.add(".html");
    	excludePatterns.add(".htm");
    }

* 10 = 0.01 초

		window.onload = function() {
			var pro = document.querySelector('#pro');
			var i = 1;
			var sInt = setInterval(function() {
				pro.value = i++;
				if(i===1001){
					clearInterval(sInt); // 꽉차면 정지시켜버림
				}
			}, 10);
		}

*
		window.onload = function() {
			var pro = document.querySelector('#pro');
			var rDiv = document.querySelector('#rDiv');
			var i = 1;
			var sInt = setInterval(function() {
				rDiv.innerHTML = (i/parseInt(pro.max))*100+'%';
				pro.value = i++;
				if(i===1001){
					clearInterval(sInt);
				}
			}, 1);

* 파일을 만약에 multiple로 받을시 리스트로받음 따라서 방번호0 이면 파일 1개

* 가상의 ㅈ바스크립트에서만 form데이터를 만들어서 post에서 서블릿으로 파라미터로받음 // ajax를 위해서 파일을 보내기 위해 사용됨. 폼태그만으로도 프로그래스 바도 못만듬.
			var formData = new FormData();
			formData.append('ftId',document.querySelector('#ftId').value);
			formData.append('ftName',document.querySelector('#ftName').value);
			formData.append('ftFile',ftFile.files[0]); // 여기서 배열 0 으로 들어가는 것도 포인트! 이게 있으면 애초에 form으로 multi어쩌구로 안보내도됨.


* xhr.send(formData); 와 xhr.send(JSON.stringify(param)); 비교! 그냥 스트링과 파일 을 담은 무언가는 다르다! 따라서 위에서 쓰는 방식을 쓴다.
request.getreader(); 	request.getParameter();
		}

* 자바스크립트에서 펑션은 아래 그대로 쓰면 재선언한것을 따르기 때문에 같은 펑션명으로 onload하려면 배열형태로 담아야함. 그러면 각각의 다른 값으로 출력할 수 있음.
하지만 window에서 제공해주는 기능이있음.
var f1 = function(){
	alert(1);
}
var f2 = function(){
	alert(2);
}
위에 것들을 아래처럼 출력가능하다.
window.addEventListner('load',f1); // EventListner('load',f1) // load 이벤트를 항상 듣길 기다리고 있음. 
window.addEventListner('load',f2);

* xhr.upload.addEventListener('progress',function(evt)){ } // 따라서 얘때문에 얼마만큼 upload 했다는 것을 알려줌.

* post 방식이 파일보내는 2가지 방법.
1. form data 방식 : request.getParameter로 받을수 있음 // 어제했던 form tag방식이랑 비슷하지
2. pay load 방식 : get.reader로 가져올 수있음. xhr.send(~~)로 태워서 보내면 pay load방식임.

* 겟방식은 화면이 바뀌어버리는 단점
* 폼태그가 나쁜것은 아니지만 화면을 바꿔서 동기화할 페이지가 없다면 AJAX밖에 답이없다. 
* post에서 form으로 태워서 보내면 겟방식처럼 바로 파라미터로 가는게 아니라 form data 형식의 body영역에 파라미터로 들어간다.



CREATE TABLE photo_board
(
	pb_num number(10,0) NOT NULL,
	pb_title varchar2(300) NOT NULL,
	pb_content clob NOT NULL,
	pb_img1 varchar2(300),   // 파일 언더바 ft 여기에는 웹콘텐트가 봤을 때 절대경로
	pb_img2 varchar2(300),
	credat char(8) NOT NULL,
	cretim char(6) NOT NULL,
	creusr number(10,0) NOT NULL, // 회원테이블과 연결시키기위해  맨처음에 생성한 사람.
	moddat char(8) NOT NULL,
	modtim char(6) NOT NULL,
	modusr number(10,0) NOT NULL, // 제일 마지막에 수정한 사람.
	pb_cnt number(10,0) DEFAULT 0 NOT NULL, // 조회수 상세보기 누르면 셀렉트 하고 더불어 업데이트까지 해야함.
	PRIMARY KEY (pb_num)
);

* chain.doFilter(request, response); 이거땜에 홍진호됨