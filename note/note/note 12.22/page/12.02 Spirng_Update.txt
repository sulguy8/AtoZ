  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_

* log4j에는 다양한 레벨이 있다.

* DEBUG(개발할때 쓰면되구나~)가 log4j로 설정되어있기때문에, 그리고 패키지명이 맞아서 출력이 되는 것임.

* info보다 낮은것들은 안찍겠다. 

	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

* pom.xml  
	<version>1.0.0-BUILD-SNAPSHOT</version> // 빌드를 하면 버전이 나옴. build
	<properties>
		<java-version>1.6</java-version>
		<org.springframework-version>3.1.1.RELEASE</org.springframework-version> // 실제로 출시되는 정식버전 release

* https://blog.naver.com/wjddydwndi/221712436308

* set 데이터타입이 datasource이기 때문에(setDatasource) 프록시데이타(ProxyDataSource) 소스든 베이직 데이타(BasicDataSource) 소스든 인터페이스를 사용하기때문.

	<bean id="bds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method ="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="bdi"/>
		<property name="password" value="12345678"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>	
	
	<bean id="ssfb" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="bds"/>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
	</bean>
	
	<bean id="pds" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="bds"></constructor-arg>
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"></property>
			</bean>
		</property>
	</bean>

가능하다.


스크립트 동적 데이터 타입.

* 펑션내부에 펑션을 하나 더추가하는 방법
var arr = [];
arr.push({name:'hong', num:1});
arr.push({name:'cho', num:2});
arr.push({name:'kim', num:1});

arr.forEach(i=>{
	i=>{
		i.id = i.num;
	}
});

* 자바 스크립트 내에서 미리 셋팅된 펑션들은 이미 누군가가 먼저 만들어 놓은것. 내가 이것을 바꿀 수도 있다.

* https://docs.dhtmlx.com/suite/grid__index.html // API대한 미리만들어진 펑션은 각 홈페이지에서 확인할 수 있다.

* 나를 바꾸는건 안돼. 내안에 바꾸는 것은 돼.
펑션도 마찬가지로 자바처럼 메모리를 재생성하지 않는 이상 하나의 메모리의 값을 공유한다. 
** 만약 다른 메모리로 사용하고 싶을때면 JSON.parse를 두번해서(String을 2번만듬) 메모리를 생성하여 따로 사용하는 방법이있다.

* 임베디드 : 차안에 기본내장되어있는 네비게이션이라고 생각하면됨.(플러그인처럼 우리가 따로사는 네비x), 
따라서 스프링에 서버가 임베디드되어있어서 서버가 필요없음. public static void main이 기본으로 있는거임.
** 따라서 spring과 spring-boot를 구분해야함. 

* return uis.findAll();  // JpaRepository에 명시되어있음.

* 쿼리도없고 마이바티스도 없고 서비스도 없는데도 지금까지 했던것들이 전부가능..!

* spring.jpa.show-sql=true			// 사용된 쿼리가 보임	
  spring.jpa.generate-ddl=false
  spring.jpa.hibernate.ddl-auto=none

/