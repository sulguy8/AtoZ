###	<context:component-scan base-package="com.sp.bdi.user" /> // test공부한거 보려면 ~~bdi.user에 user지워야됨

* 보통 Java 문법은 S(주어:object) V(동사:method) O(목적어:argument) 순서이지만, reflection 은 V.invoke(S,O) 순이라고 보면된다. 

MyClass myClass = new MyClass("kaspyx")
String myName = myClass.getMyName();

	** 이렇게 바뀜 **

Class myClass = Class.forName("MyClass");
Constructor myConstuctor = myClass.getConstructor( new Class[] {String.class });
Object myObj = myConstuctor.newInstance("kaspyx");
Method method = myClass.getMethod("getMyName");
String myName = (String)method.invoke(myObj);


* <bean id="car1" class="com.sp.bdi.test.test2.Car" scope="prototype"> // 스코프를 주면 호출할때마다 메모리를 생성함. 메소드들은 메소드가 끝나는시점에서 죽어버림.

* 싱글톤, 프로토타입 잘구분해서 사용할 것.

* servlet-context.xml // basepackage라고 부름! 
에서 24번라인 <context:component-scan base-package="com.sp.bdi"/> 때문에 bdi의 @를 다 읽어올수 있는것

* 스트링에서 읽을수있는 "@"들
1. @Controller
2. @Service
3. @Repository // DAO
4. @Component // VO

* ajax할때 web.xml에서 설정하거나? 서블릿에서 설정하거나 2가지 방식이었는데 스프링도 basepackage하거나 ioc하거나 비슷함.

* 메모리 생성된거랑 정의를 하는것은 다르다! // "null"은 메모리 생성, "Food(name=null, price=null)가 뜨는 것은 정의"

* 메모리 생성은 @Component("cook") 정의는 @Autowired // "null" 에서 "Food(name=null, price=null)" 만들어줌.

	@Autowired // 자동으로 연결해줘. 이게 있으면 메소드를 실행을 해줌. 그리고 메모리로 생성된걸 자동으로 집어넣어줌.
	public void setF(Food f) {
		this.f = f;
	} // 이렇게 하면 setF가 파라미터로 받는 Food f를 따로 정의 안해줘도됨.

	public class Execute {
		public static void main(String[] args) {
			ApplicationContext ac = new ClassPathXmlApplicationContext("ioc/ioc-3.xml");
			Cook cook = (Cook)ac.getBean("cook");
			System.out.println(cook.getF());
		}
	}

** 원래는 이렇게 해줬어야 했음.
public class Execute {
	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("ioc/ioc-3.xml"); // 메모리 생성.

		Cook cook = (Cook)ac.getBean("cook"); // 요것들이
		Food food = (Food)ac.getBean("food"); // "정의" 인가?

		cook.setF(food);
		System.out.println(cook.getF());
	}
}

* 상속받는 관계(bab은 food라고 불릴 수 있는 상황이면 원래 food가 있는 상황에서 food라고 불릴수 있는 것이 2가지가 되잖아.)
  에서 @Autowired의 오류를 피하기위해 @Qualifier("bob")이라고 정확히 하나로 찍어줘야함.

* final인 String의 기본생성자String()를 String(arg)로 사용하고 싶다면?
	<bean id="str"	 class="java.lang.String">
		<constructor-arg value = "초밥"></constructor-arg> // 이렇게 해줘야 한다!
	원래는 String은 final이기때문에 일반적인 방법으로 기본생성자를 (

비교1 ////////////////////////////////////////////////////////////////////////////////

<bean id = "cpu" class="java.lang.String">
	<constructor-arg value="I5"></constructor-arg> // 생성자의 arg에 "I5" 대입해라. String처럼 특별한 참조형 데이터타입만 가능한 것.
</bean> // Execute에서 c.setCpu("I5")를 한거고
String cpu = new String("I5"); 처럼 한거임.

위의 말에 덧붙이면. 아래처럼 한 것임.
cpu = new String("I5"); // 참조형 데이터 타입은 원래는 이렇게 해줘야하는데
String cpu = "I5"; // 자주쓰이니까 이렇게 줄어든 것임.

비교2 ////////////////////////////////////////////////////////////////////////////////
	
<bean id = "computer" class="com.sp.bdi.test.test4.Computer">
	<property name="cpu">
		<value>I5</value>
	</property>
</bean> // 얘는 그냥 값만 준거임.
c.setCpu("I5") 이렇게.

결과 /////////////////////////////////////////////////////////////////////////////////
<bean id = "cpu" class="java.lang.String">
	<constructor-arg value="I5"></constructor-arg> 
</bean>

<bean id = "computer" class="com.sp.bdi.test.test4.Computer">
	<property name="cpu">
		<ref bean="cpu"></ref>
	</property>
</bean>

이렇게 해서 final인 String도 arg를 지정해서 사용할 수 있게 되는 것.(다른 참조형변수들, 즉 new를 사용해야하는 변수들은 불가능하다.)
///////////////////////////////////////////////////////////////////////////////////////

String str1 = "abc";
String str2 = "abc";

참조형 데이터타입은 따로 new해주지 않으면 같은곳을 바라보기때문에 str1 == str2를 하면 true가 뜸.

String str1 = "abc";
String str2 = new String("abc");

이렇게 메모리를 따로 지정해줘야 false가 뜸.

* @Autowired // String 으로 지정해주면 string 2가지를 찾음. 따라서 qualifier로 지정을 해줘야함.

* 생성자주입, 세터(세터 메소드에@Autowired, @Qualifier("ram1")) 주입

	<bean id="cpu1" class="java.lang.String">
		<constructor-arg value="I5"></constructor-arg>
	</bean> <					// 생성자 주입
	<bean id="ram1" class="java.lang.String">
		<constructor-arg value="16G"></constructor-arg>
	</bean>




	<bean id="car1" class="com.sp.bdi.test.test2.Car"
		scope="prototype">
		<constructor-arg value="소나타"></constructor-arg>
	</bean>
	<bean id="carMaker" class="com.sp.bdi.test.test2.CarMaker">
		<constructor-arg value="기아"></constructor-arg>
		<property name="car"> 			// 세터 주입
			<ref bean="car1" />
		</property>
		<property name="price">
			<ref bean="car2" />
		</property>
	</bean>

* 에러!
Could not autowire field: private com.sp.bdi.test.test4.Monitor com.sp.bdi.test.test4.Computer.monitor; 
nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: 
No matching bean of type [com.sp.bdi.test.test4.Monitor] found for dependency: 
expected at least 1 bean which qualifies as autowire candidate for this dependency.

이게 뜨면 해당서블릿에  @Component("monitor") 하던가
ioc에 	<bean class="com.sp.bdi.test.test4.Monitor"></bean> 하던가 해서 메모리 생성을 해줘야함.

* @Autowired는 메모리를 생성한 뒤에만 사용이 가능하다!

* 스프링을 배우는 이유!
1. 여러사람들이 싱글톤을 만들면 다른사람들이 한 것들을 분석해야함.
2. 스프링을 쓰면 분석할 필요가없음. @ 와 xml만 보면됨

* 스프링은 하나의 메소드당 @RequestMapping("/user/list") 같이 하나의 url을 갖음.


* web.xml // 웹이 아닐때 우리가 메모리호출을 우리가 했었음. 하지만 웹에서는! 서버를 킬때부터 메모리를 만드는 것이 아님. 서버를 키면!
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  // 요게 올라갈때
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value> // 여기 xml을 읽음. 아래 ** 참고
		</init-param>
		<load-on-startup>1</load-on-startup> // 여기를 거치기때문에 서버를 키고 여기를 거쳐야 메모리를 생성해주는거임.!
	</servlet> // 이쪽에서 loadonstartup을하고

** servlet-context.xml // 웹 서블릿들의 메모리를 자동으로 생성한다!
<context:component-scan base-package="com.sp.bdi.user" />