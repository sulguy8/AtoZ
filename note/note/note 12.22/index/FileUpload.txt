* 파일 업로드(I/O)
인풋(보냄) 아웃풋(받음)
클라이언트     >   서버   >	클라이언트
인풋 	      받음	보냄	아웃풋

* post 방식이 파일보내는 2가지 방법.
1. form data 방식 : request.getParameter로 받을수 있음 // form tag방식이랑 비슷함.
2. pay load 방식 : get.reader로 가져올 수있음. xhr.send(~~)로 태워서 보내면 pay load방식임.

* 자바는 유니코드 기반이라 char는 2byte

* FileInputStream 는 1바이트, 즉 바이트기반. 따라서 2바이트인 한글로 읽으려고 하면 문제가 생김.

* FileInputStream fis = new FileInputStream(path); // 내가 임의로 강요하는 파일에 대한 다양한 변수가 있기때문에 이셉션을 강요함.

* int s = fis.read(); // 이걸 할때마다 1번씩 뽑아옴. 마지막은 -1. 따라서 while문으로 돌려서 -1이 충족이된다면 끝을 알 수 있음.

* FileInputStream 파일로부터 가져와서 스트림형식으로 만들어주고! 얘는 하나하나 읽기만함 따라서 UTF-8로 짜줄수 있는 보조스트림이 필요함!  
  InputStreamReader isr = new InputStreamReader(fis,"utf-8"); 	// 이것! 하지만 한글자씩 읽을건 아니니까!
  BufferedReader br = new BufferedReader(isr); 			// 따라서 뭉탱이로 읽기위해 이것이 필요! 니가 읽고 Line에 가치가 생기면 넘겨줘! 이게없으면 비트별로 쪼개서 하나하나 추가해야함.
				// 여기까지가 인풋을 한것! 

** 그래서 Line을 읽어서 null이 아니라면 str을 보여줘!
while ((str=br.readLine())!= null) 
System.out.println(str);
}	

* 우리는 지금까지 파일만 안만들었지 PrintWriter()로 활용해왔음. 아래는 파일을 만드는 방법.			
FileOutputStream fos= new FileOutputStream(tPath);
OutputStreamWriter osw = new OutputStreamWriter(fos,"UTF-8");
BufferedWriter bw = new BufferedWriter(osw);
bw.write(string);	// 파일이 생김. 우리가 input했던거 반대로 해버리는 거임. 
bw.flush();  	// 물을 내려서 깔끔

* 파일을 다루는 공장의 터를 지어보자.

DiskFileItemFactory dfif = new DiskFileItemFactory(); 		// 공장을 짓고
dfif.setSizeThreshold(memSize);				// 효율성을 위해 기계마다 할당량을 분담시키고 
dfif.setRepository(new File(System.getProperty("java.io.tmpdir"))); 	// 임시로 쟁겨놓을 창고를 지정
ServletFileUpload sfu = new ServletFileUpload(dfif);		// 기계의 스위치를 올리고
sfu.setFileSizeMax(fileSize);					// 내용물이 들어갈 박스 크기
sfu.setSizeMax(totalSize);					// 수용가능한 박스의 양

if(ServletFileUpload.isMultipartContent(request)) {		// 요청이 들어왔나? 왔으면 true!
	try {
		List<FileItem> fList = sfu.parseRequest(request);		// 요청을 리스트에 담고
		Map<String,Object> param = new HashMap<>();	// 키와밸류를 담을 맵을 만들고
				
		for(FileItem fi:fList) {				// 리스트를 하나씩 읽어보자
			String key = fi.getFieldName();		// key에다가 jsp에서 입력한 키를 입력
			if(fi.isFormField()) {				// 만약에 키밸류가 있다면?
				String value = fi.getString("utf-8");	// 그것은 utf-8로 받을거고
				param.put(key, value);		// 맵에다가 키와 밸류로 저장!
			} else {
				param.put(key, fi);			// 키밸류가 file형식이면 이쪽으로
			}
		}
		fts.insertFileTest(param);			// 서비스로 보내자 ** mybatis-config에도 잘 추가했었는지 확인하자!
	} catch (FileUploadException e) {
		e.printStackTrace();
	}

} else {
	throw new ServletException("파일 형식이 잘못되었습니다.");
}



* 톰캣으로 예전버전의 내용들을 받을때 문제가 생긴다면 "commons-fileupload"을 메이븐에서 받을 것.
<dependency>
	<groupId>commons-fileupload</groupId>
	<artifactId>commons-fileupload</artifactId>
	<version>1.4</version>
</dependency>

* <form method="POST" action="/file" enctype="multipart/form-data"> 파일보낼때 이걸로 통해서 보내야 된다!

* 위의 태그로는 request.getParameter로 아이디를 받아오지 못하기 때문에 servlet에서 아래와 같은 방식으로 받아와야한다.
if (ServletFileUpload.isMultipartContent(request)) {
	try {
		List<FileItem> fList = sfu.parseRequest(request);
		for (FileItem fi : fList) {
			System.out.println(fi.isFormField()); 이렇게 하면 파일에서 받아오는 것들은 false, 나머지 것들은 true가 뜬다.
			System.out.println(fi.getFieldName());
		}
	} catch (FileUploadException e) {
		e.printStackTrace();
			}

* fi.write(targetFile); // write에 커서올려보면 알겟지만 이셉션을 강요함. 따라서 굳이 이셉션안해줘도됨.

* 하나의 트랜젝션(예를 들면 인서트,인서트,딜리트를 한번에 묶는것)으로 묶어서 하나라도 실패하면 롤백하는 것이 합리적임.

* 파일을 만약에 multiple로 받을시 리스트로받음 따라서 방번호0 이면 파일 1개

* 가상의 자바스크립트에서만 form데이터를 만들어서 post에서 서블릿으로 파라미터로받음 // ajax를 위해서 파일을 보내기 위해 사용됨. 폼태그만으로도 프로그래스 바도 못만듬.
	var formData = new FormData();
	formData.append('ftId',document.querySelector('#ftId').value);
	formData.append('ftName',document.querySelector('#ftName').value);
	formData.append('ftFile',ftFile.files[0]); // 여기서 배열 0 으로 들어가는 것도 포인트! 이게 있으면 애초에 form으로 multi어쩌구로 안보내도됨.

* 우리가 다운받을때 여러사람들중에 파일이름의 중복이 있을 수 있기때문에 서버에서는 나노타임으로 나눠서 저장한다.
하지만 우리 DB에서는 그이름이 남아있어서 막상 서버에서 받으려면 이름이 다른데 , 이는 우리가 이름을 서버꺼, DB꺼로 나눠서 두개로 저장하기 때문이다.

* String key = fi.getFieldName();   // String fileName = fi.getName(); // 두개 차이를 알것! 키와 밸류

* 만약에 인서트만 잘되고 파일저장이 제대로 안될땐? 롤백과 삭제가 "컨트롤러"가 아닌 "서비스"에서 같이 이뤄줘야함.

* 맵으로 만들면 걍 스트링이면 문제가없는데 파일들은 좀바꿔줘야함 2개는 String, 파일은 file로 캐스팅해줘야함.
	String ftName = (String)param.get("ftName");
	String ftId = (String)param.get("ftId");
	FileItem fi = (FileItem)param.get("ftFile");

* xhr.send(formData); 와 xhr.send(JSON.stringify(param)); 비교! 그냥 스트링과 파일 을 담은 무언가는 다르다! 따라서 위에서 쓰는 방식을 쓴다.
	request.getreader(); 	request.getParameter();
		}

