* public @ResponseBody List<UserVO> login(@RequestBody UserVO user, HttpSession hs){ // 이렇게만 해줘도 session에 있는 값을 전부가져옴.

* filter > web.xml
  <filter-mapping>
    <filter-name>SessionFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> // url pattern은 "/*" 하던가

서블릿에다 
@WebFilter("/*") 해도되는데 이거는 스프링버전 3부터(지금 우리는 2.5) 

* 단순한 서버이동(/views),비즈니스 로직(/user/list같은)으로 나뉨.

* 헤더값을 임의로 만들땐 x를 붙임. x를 보면 "아 원래 있는건 아니고 새로만든거구나!" 라고생각하면됨.

* 세션에 아이디값이 없을때 이셉션 내주는 것도 중요함. throw로 이셉션내는것보다 json으로 printwrite해서 보내는게 알아먹기 쉽고 깔끔하긴함.

* 필터도 대표적인 AOP방식이라 할 수 있다.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. 스프링 프로젝트를 만들고 서버를 통해서 home에 잘 접속이 되는지 확인할 것.

2. pom.xml에 필요한 것들을 넣고 해당 프로젝트 update 할 것.

3. web.xml을 확인하고 listener와 init-param타는 것들을 확인할것
	a. root-context.xml : DBCon과 작성과 더불어 mybatis셋팅, 맵핑에 관련되어있는 xml 만들기.
	b. servlet-context.xml : ViewsController에서 했던 것들. <context : component-scan base-package="경로 잘 지정해주기"> 

4. com.sp.bdi에 Controller, Service, DAO, VO 작성하고 ARC로 테스트해보기

5. Filter(생성하고 web.xml에 filter가 잘 추가됐는지 확인!) 작성하기

6. 화면 구현하기

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

