## "무명"클래스를 이용해 리스트안에 클래스를 넣는방법.
interface TestInter {
	void test();
}

public class ListSort {

	public static void main(String[] args) {
		List<TestInter> tiList = new ArrayList<>();
		tiList.add(new TestInter() {
			public void test() {
				System.out.println("a");
			}
		});
	}
}


public class Test {

	public static void main(String[] args) {
		
		
		

		/*
		 * ArrayList<Integer> nums = new ArrayList<>();
		 * 
		 * nums.add(1); nums.add(2); nums.add(3); nums.add(4); nums.add(5);
		 * 
		 * Collections.reverse(nums);
		 * 
		 * System.out.println(nums);
		 */

		/*
		 * for (int i = 0; i < nums.size(); i++) { for (int j = i + 1; j < nums.size();
		 * j++) { if (nums.get(i < nums.get(j)){ nums.add(nums.get(i)); nums.set(i,
		 * nums.get(j)); nums.set(j, nums.get(nums.size() -1)); nums.remove(nums.size()
		 * -1); } } }
		 */

	}
}

* 법칙은 아니고 룰!
<K,V> // 키와 밸류가 있을때 
<T> type // 공통으로쓸때
<E> elements

class Human{
	private int age;
	private int height;
	
	public Human(int age, int height) {
		super();
		this.age = age;
		this.height = height;
	}

	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getHeight() {
		return height;
	}
	public void setHeight(int height) {
		this.height = height;
	}
	
	@Override
	public String toString() {
		return "Human [age=" + age + ", height=" + height + "]";
	}
}

class Compare<T> implements Comparator<T>{ // 뭐가 들어가는지는 모르지만 T라고 불리는 type이 들어간다.

	@Override
	public int compare(T o1, T o2) {
		Human h1 = (Human)o1;
		Human h2 = (Human)o2;
		if(h1.getAge()<h2.getAge()) {
			return -1;
		}
		if(h1.getAge()>h2.getAge()) {
			return 1;
		}
		return 0; // 두개의 수가 같을때
	}
	
}
public class Test {

	public static void main(String[] args) {

		List<Human> hList = new ArrayList<>();
		hList.add(new Human(20,170));
		hList.add(new Human(17,180));
		hList.add(new Human(23,174));
		hList.add(new Human(28,169));
		hList.add(new Human(30,173));
		
		for(int i=0;i<hList.size();i++) {
			for(int j=i+1;j<hList.size();j++) {
				if(hList.get(i).getHeight()>hList.get(j).getHeight()) {
					Human h = hList.get(i);
					hList.set(i,hList.get(j));
					hList.set(j, h);
				}
			}
		}
		System.out.println(hList);
	}
}




========================================================
Class Human {

	public int getAge() {
		return this.age;
	}
}


class Compare<T> implements Comparator<T> {

	public int compare(T o1, T o2) {
		Human h1 = (human)o1;
		human h2 = (human)o2;
		if(h1.getAge()<h2.getAge()) {
			return 1;
		}
		if(h1.getAge()>h2.getAGe()) {
			return -1;
		}
		
		return 0;

	}

public class Test {
	public static void main(String[] args) {
	
	Collections.sort(hList, new Compare<Human>());	
	}
}
=========================================================
public calss DBCon {
	private static String URL;
	private static String ID;
	private static String PWD;
	
	static {
		InputStream is = DBCon.class.getResourceAsStream("/config/dbcon.properties");

	Properties prop = new Properties();
	
		try {
			prop.laod(is);
			URL = prop.getProperty("url");
			ID = prop.getProperty("id");
			PWD = prop.getProperty("pwd");
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.pritnln(prop);
	}


	










