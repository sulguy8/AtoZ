const xhr = new XMLHttpRequest(); 

function doCalc() {	
	* 배열을 선언하고 싶어?
	var json = {
		num1 : 1,
		num2 : 2,
	}

	* 배열을 스트링으로 만들고 servlet으로 보낼 준비물을 만들고 싶어?
	var jsonStr = JSON.stringify(json); 			** 스트링으로 만들고
	var url = '/calc?json=' + encodeURIComponent(jsonStr); 	** 준비물 완성!
	
	* 이제 jsp로 보내야지!
	xhr.open('GET', url); 			** 준비!(1)
	xhr.onreadystatechange = function(e){		** 한바퀴 도는중..(2~4)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

## servlet에서 도는 중..(2~4)

	** 갖고온것들(url)을 String으로 먼저 받아야지?
	String json = request.getParameter("json");

	** 맵에다가 넣어야지?
	Gson g = new Gson();
	Map<String,String> param = g.fromJson(json, map.class);
	(String json = g.toJson(boardList); // 반대로 jsp로 날리는 방법!) 
	~~~~~~~

	** 이제 response를 이용해서 다시 html로 날려볼까?
	response.getWriter().print(result);	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

## servlet에서 result를 가지고 도착!(4)

		if(xhr.readyState==4){		** 도착!(4)
			if(xhr.status==200){		** 뭘갖고왔니?(200)
				document.getElementById('result').value = xhr.responseText; 
			}			** Id에다가 xhr.responseText해보자!
		}
	}
	xhr.send();	** 화면으로 출발!
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
* src 폴더에 	con.ajax.common, controller, DAO, service
		config 만들고 아래 채워넣기	

** BoardService
	Map<String,String> selectBoard(Map<String,String> board);
	List<Map<String,String>> listSelectBoard(Map<String,String> board);
	Map<String,String> insertBoard(Map<String,String> board);
	Map<String,String> updateBoard(Map<String,String> board);
	Map<String,String> deleteBoard(Map<String,String> board);
	
** BoardDAO
	Map<String,String> selectBoard(Map<String,String> board);
	List<Map<String,String>> listSelectBoard(Map<String,String> board);
	int insertBoard(Map<String,String> board);
	int updateBoard(Map<String,String> board);
	int deleteBoard(Map<String,String> board);

** DBCon
	static {
		InputStream is = DBCon.class.getResourceAsStream("/config/dbconfig.properties");
		Properties prop = new Properties();
		try {
			prop.load(is);
			URL = prop.getProperty("url");
			ID = prop.getProperty("id");
			PWD = prop.getProperty("pwd");
			DRIVER_NAME = prop.getProperty("driver");
			Class.forName(DRIVER_NAME);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {	
			e.printStackTrace();
		}
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

* AJAX(AnSycn,Javascript,And,Xml)
* 화면이 가만히 있는 상태에서 객체를 사용해서 비동기적으로 화면에 구현.
* 자바스크립트는 public 이랑 private 2개 존재.
* ajax를 이용하여 백엔드로 호출하는 방법.
* xhr.onreadystatechange // on 이벤트는 소문자로 통일 시킴.
* 특수문자는 url에서 다른기호로 써지기 때문에 인코딩 해줘야함
* 랜더링 > 스크립트 순서로 구현됨. 단. 호출하는 관계에서는 랜더링을 먼저하고 스크립트를 읽기때문에 스크립트 영역이 위에 있어도됨.
* 모든 태그들은 onload라는 것을 가지고 있음. 태그에 onload 를 명시를 안해주면 한번훑고 사라져서 밑에 스크립트에 활용할 수 없는데
  onload 이벤트를 사용하면 전부다!!! 랜더링을 먼저!!하고 스크립트를 읽기때문에 위에 전자가 가능하다.
* 자바스크립트는 오버로딩개념이 없음. 파라미터가 있더라도 옵션임. 맨마지막에 선언되는 것이 생존자.
* JSON = 자바스크립트 오브젝트 구조?
* @WebServlet(name = "ViewsServlet", urlPatterns = {"/views/*"}) // web.xml에 안써도됨. 
* 옛날방식이 익숙하다면 jsp가 편할수도 있음.
그러나 프론트엔드가 백엔드가 바뀌면 다같이바뀌어야함.
하지만 ajax는 jsp태그가 하나도 없기때문에 굳이 jsp가 아니어됨. 리엑트, 엥귤러 등등 c건뭐건 상관없음. 통신만 되면 됨.
따라서 요즘 트렌드가 이것

####

<script>
const b = '123';
b = '234'; // 오류남! const는 "상수"!
alert(b);
</script>

####

function test(){
	this.a = 3;
	
	var t = new test();
	alert(t.a);

####

<script>
const xhr = new XMLHttpRequest();

}

</script> // const xhr은 XMLHttpRequest()의 펑션들을 가져다 쓸수 있게됨.

####

<script>
const xhr = new XMLHttpRequest();
function doSend(){
	var url = document.getElementById('url').value;
	xhr.open('GET', url); 				// get 방식으로 url을 받는다. xhr은 오픈하기전에 0, 오픈하면 1.  
	xhr.onreadystatechange = function(e){ 		// on/readyState/change 바뀔때마다 내 아랫것들을 실행할 것이다.
		if(xhr.readyState==4){                	// xhr은 처음에 0, 오픈하면 1, send 하면 2,3, 일을 다했어 리스폰스로 응답하면 4
			if(xhr.status==200){		// 200이라면(성공했다면) 
				alert(xhr.responseText);// xhr이 가지고 있는 responseText를 출력해줘라.
			}
		}
	}
	xhr.send(); 					// GET방식의 url로 호출할 것이다.
}
</script>

####

var arr = new Array();
arr.push(1);
위아래 둘은 같다.
arr = [];
arr.push(1); 

####

var arr= {};
arr.name = 1; 
arr.['name'] = 1;
name :1

####

var arr = {
		name : 1,	// 왼쪽이 키, 오른쪽이 키밸류
		age : 22
};
var hArr = [];
hArr.push(h);
hArr.push(h);
hArr.push(h);
console.log(hArr); 	// arr라는 맵에 hArr리스트를 담는 것과 다르다.
	
####

	<div id="rDiv"></div>
	<script>
		var str = '{"name":"홍길동","age":"33"}';
		document.write(str.name); 	// 그냥 문자열일 뿐. undefined뜸
		var h = JSON.parse(str);// 키와 키값을 가진 객체로 만들어주는 JSON
		document.write(h.name);
		document.write(h.age);
		h.addr="서울";
		document.write(h.addr);
		
		window.onload = function() {
			var xhr = new XMLHttpRequest();
			xhr.open('GET', '/list');
			xhr.onreadystatechange = function() {
				if (xhr.readyState == 4) {
					if (xhr.status == 200) {
						document.getElementById('rDiv').innerHTML = xhr.responseText;
					}
				}
			}
			xhr.send();
		
		}
	</script>


####

  <jsp-config>
  	<jsp-property-group>
  		<url-pattern>*.jsp</url-pattern>  // .jsp파일은 앞으로 
  		<include-prelude>/WEB-INF/views/common/header.jspf</include-prelude>  // 여기의 .jspf를 추가할거야.
  	</jsp-property-group>
  </jsp-config>