* $(); // jquery();의 축소판. 단순한 펑션이라고 생각하면됨.
$('#btn') // length를 가지고 있음. 단일 셀럭터가 아님. querySelectorAll처럼 써야함.


* window.onload{}
* window.addEventListener('load',function){}
* $(document).ready(function(){
	alert('다큐먼트가 준비가 됐구나~~');
  });
**(document).ready(func1); 로 줄여쓸 수 있음.
*** window.onload{} // (마지막것만 실행)와 $(document).ready(function() // (있는거 전부다 실행)는 차이가 있다.

* jquery 사용할때 1.x(옛버전 브라우저), 2.x(쓰지마!), 3.x(퍼포먼스에 집중)가 있음
  
* jquery에 이벤트 주는 방법
	$(document).ready(function(){
		$('#btn').on('click',function(){
			alert('날 눌렀군~');
		})
	}); // 1번째는 어떤이벤트(click)인지 , 다음 2번째는 그 이벤트때 이걸(alert) 실행해라

* alert($('#text').val()); 	// 겟터 역할
  alert($('#text').val(abc)); 	// 셋터 역할

* json으로 vo를 활용할땐 명시적 언어이기 때문에 스펠링,대문자가 한치의 오차가 있으면 안된다. 
** @RequestParam Map<String,String> param // 이방식을 쓰면 되긴되는데 틀렸는지 안알려줌. 장점과 단점이 있음.

@ModelAttribute // 얘만 생략가능
@RequestParam	// model과 같이 parameter로 동작함.

@RequestBody	// json 형태, 예전 서블릿에서는 gson으로 다시한번 번역을 거쳤지만 현재 jackson-databind 덕분에 그냥 쓸 수 있음.

* char : 6칸이라고하면 2칸만 들어와도 4칸을 남김. 그만큼 더빠름.
  varchar2 : 6칸이라고 하면 2칸만 들어왔을때 4칸을 날림. 경제적이지만 한번 연산처리를 거치기 때문에 느리다. 


jsp
maven 
mybatis
spring


* classpath:mybatis/mybatis-config.xml // classes 폴더를 바라보게됨.


slect*from papago_info
where pi_target=rpad('en',6,' '); // char는 'en    ' 빈공간까지 인식하기때문에 왼족 구문을 mybatis에 추가해야함.


* TDD(test driven development) // 현재 가장 많이 쓰는 개발 테스트방법. 실패를 먼저 가정하고 개발하는 것.
테스트 주도 개발 방법론

* Spring test // spring-webmvc아래에다가 추가할것.
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>   // 4.12로 바꿔줄것!
			<scope>test</scope>
		</dependency>  


create table papago_info(
pi_num number(10,0) primary key,
pi_source char(6) not null,
pi_target char(6) not null,
pi_text varchar2(300) not null,
pi_result varchar2(1000) not null,
pi_cnt number(10,0) default 1
);

create sequence seq_pi_num;

delete from papago_info;

select*from papago_info;

insert into papago_info(pi_num,PI_SOURCE,PI_TARGET,PI_TEXT,PI_RESULT,PI_CNT)
values(seq_pi_num.nextval, '#{piSource}', '#{piTarget}', '#{piText}', '#{piResult}', 1);