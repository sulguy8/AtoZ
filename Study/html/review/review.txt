1. 중복제거
2. 내림, 올림차순 정렬
3. 상속관계 설명


# POJO를 이용해서
# 배열문을 이용해서 List를 표현
# HashMap과 List를 for문을 이용하여 구문 반복
# 로또
# 구구단
# 배열 방 추가
# static 메소드와 instance 메소드 사용방법


Pull로 땡겼지만 클래스 경로를 찾지 못할때! 빌드 패스에서 해결!
1. JRE System Library에 Alternate JRE가 설정되었는지?
2. Jar파일이 잘 연결되었는지?
3. master 폴더에서 하위 폴더들에게 Source Folder 사용 눌러보기
4. 마지막으로 classpath 커밋하기

void와 return을 갖는 메소드가 있는이유!
void는 하나의 결과값을 하나의 데이터 타입으로 묶기가 힘듬.
하지만 return값을 갖는 메소드는 특정한 데이터 타입이 있기때문에 다른 변수(int = a;)에다가 대입(a = int로 return하는 특정값)에 대입하기 쉽기때문에 훨~씬 활용도가 좋음.


## 내림차순 정렬
** 정렬메소드([])
package review;

import java.util.Random;

public class Sort {
	public static void main(String[] args) {
		int[] num = new int[10];
		Random r = new Random();
			for(int i=0; i<num.length; i++) {
			num[i] = r.nextInt(100);
			}
			
			for(int i=0; i<num.length; i++) {
				for(int j=i+1; j<num.length; j++) {
				if(num[i] < num[j]) {
					int tmpNum = num[i];
					num[i] = num[j];
					num[j] = tmpNum;
				}
				}
			}
		
			
			for(int i=0; i<num.length; i++) {
				System.out.println(num[i]);
			}
		
			
	}
	
}

** ArrayList 정렬
package study01.test10;

import java.util.ArrayList;
import java.util.Random;

public class DoubleList {
	
	public static void main(String[] args) {
		ArrayList<String> strList = new ArrayList<String>(); 
		ArrayList<Double> doubleList = new ArrayList<Double>(); 
		
		Random r = new Random(); 
		for(int i=0; i<10; i++) { 
			strList.add(r.nextInt(100)+"."+r.nextInt(10));
			doubleList.add(Double.parseDouble(strList.get(i)));
		}	
		System.out.println(doubleList);
		System.out.println(doubleList.get(0)+doubleList.get(1)); 

		ArrayList<Double> nums = new ArrayList<Double>();
		nums.add(1.1);
		nums.add(1.3);
		nums.add(0.5);
		nums.set(0, 0.5);
		
			for(int i=0; i<nums.size(); i++) {
				for(int j=i+1; j<nums.size(); j++) {
					if(nums.get(i) > nums.get(j)) {
						double tmpNum = nums.get(i);  	
						nums.set(i, nums.get(i));		
						nums.set(j,tmpNum);		
			
						System.out.println(nums);
						System.out.println(nums.get(0) + nums.get(1));
					}
				}
		
			}
	}
}

## 중복제거 정렬

package study01.test04;

import java.util.Random;

public class ArrayTest {
	public static void main(String[] args) {
		int[] nums = new int[6];
		Random r = new Random();
		for(int i=0; i<nums.length; i++) {
			nums[i] = r.nextInt(10);  //
			for(int j=i-1; j>=0; j--) {
				if(nums[i]==nums[j]) {
					i--;				
					break;
						
				}
			}				
		}
												
		for(int i=0; i<nums.length; i++) {  
			System.out.println(nums[i]);    
	}
}
