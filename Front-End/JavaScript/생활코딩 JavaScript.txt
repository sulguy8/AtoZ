https://www.youtube.com/watch?v=PZIPsKgWJiw&list=PLuHgQVnccGMA4uSig3hCjl7wTDeyIeZVU

객체지향 프로그래밍!!


# 나는 정규표현식을 이용해서 패턴을 만들고 활용할 줄 알아!

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# 3
Window, Mac Os에서 콘솔사용법, 크롬 개발자 도구

# 4 실행과 실습 (3/3) : 도구의선택
* Sublime Text(IDE 사용법), 좋은도구를 찾는 노력을 게을리 하지 말 것!

# 5 숫자와 문자 (1/4) : 수의 표현
* 정수와 실수

# 6 숫자와 문자 (2/4) : 수의 연산
* Math.pow(3,2); // 3의 2승
* Math.round(10.6); // 반올림
* Math.ceil(10.2); // 가장 가까운 정수에 올림.(반올림과 다름) <-> Math.floor 내림.
* Math.sqrt(9); // 제곱근
* Math.round(100 * Math.random()); // 소숫점 없이 랜덤값 구하기

# 7 숫자와 문자 (3/4) : 문자의 표현
* SyntaxError : Unexpected token Illegal // 문법에러 : 유효하지 않은 문장이 나왔다.
* alert('egoing\'s coding everybody'); // \ escape라고 부름
* typeof 1 // 데이터타입을 아는방법

# 8 숫자와 문자 (4/4) : 문자에 대한 명령들
* \n은 줄바꿈
* opentutorials.org/course/50/37 // 자바스크립트 함수들

# 9 변수 (1/2) : 사용법

# 10 변수 (2/2) : 변수의 효용

# 11 주석
* 가장좋은 코드는 주석도 필요없이 이해할 수 있는 코드
* 내가 짰더라도 3개월 뒤에는 나의 코드가 아님. 즉 미래의 타인이 될 날 위해 주석을 다는 습관을 들일 것. 

# 12 줄바꿈과 여백
* 자바스크립트에선 ; 생략가능. 줄바뀌면 끝난것으로 앎.

# 13 비교 (1/4) : 연산자란?
* = : 대입 연산자
  == : 비교 연산자

# 14 비교 (2/4) : ==과 ===
* == : 동등 연산자(equal operator) 		// ex) '1' == 1 (true)
* === : 일치 연산자(strict equal operator)	// ex) '1' === 1 (false) 따라서 이것을 쓰자! 동작할때 오류가 발견되는 것보다 코딩할때 발견되는 것이 더 나음.

# 15 비교 (3/4) : ===를 사용하자!
* undefined : 정의되지 않은, 프로그래머가 의도하지 않은 상황
* null : 값이 없는데, 프로그래머가 값이 없는상태를 의도적으로 유도함.
* 0이 아닌 값들은 true. 0이면  false
* NaN은 0/0같이 계산할 수 없는 것. 따라서 NaN === NaN 은 false. 
* https://dorey.github.io/JavaScript-Equality-Table/ 참고

# 16 비교 (4/4) : 부정과 부등호

# 17 조건문(1/5) : 조건문이란

# 18 조건문 (2/5) : else, else if
* if는 else if, else 까지 합쳐서 true 1번만 작동한다.

# 19 조건문 (3/5) : 조건문의 응용
* prompt('당신의 나이는?');

# 20 조건문 (4/5) : 논리 연산자
* (true && true && false)  이런 형태로 구성되어야 함.
* || 조건문은 결국 (true) 이런 형태로 구성됨.  

# 21 조건문 (5/5) : boolean의 대체재
* if(0) {alert(1);}  if('') // 자바스크립트에서는 숫자0이나 비문자열 ' ', null, undefined는 false로 간주한다. 
* if(1) {alert(1);} // true
* https://dorey.github.io/JavaScript-Equality-Table/ 참고

# 22 반복 (1/6) : 기본문법
* loop, iterate를 반복문이라고 함.
* while(true) { } // while반복문은 false가 될때까지 반복된다.

# 23 반복 (2/6) : 반복조건

# 24 반복 (3/6) : for문

# 25 반복 (4/6) : 반복문의 효용

# 26 반복 (5/6) : 반복문의 제어 (break,continue)
* 1~10 사이에 5에서 멈추고 싶으면 break; // 그 순간이 오면 모든 반복문을 종료시킴
* 1~10 사이에 5를 제외하고 싶으면 continue; // 그 순간으 반복문만 종료시키고 반복문을 계속돌림

# 27 반복 (6/6) : 반복문의 중첩

# 28 함수 (1/5) : 함수란?

# 29 함수 (2/5) : 함수의 효용
* Reuse(재사용성), maintenence(유지보수), 가독성 제고

# 30 함수 (3/5) : 입력

# 31 함수 (4/5) : 출력

# 32 함수 (5/5) : 다양한 정의 방법
* numbering = function(){ } 과 function numbering(){ }은 같다.
* (function () { })(); // 정의와 동시에 바로 호출됨. 따라서 이름이 없기때문에 "익명함수"라고 부른다.

# 33 배열 (1/5) : 배열의 문법
* 배열은 index(색인), elements(원소)으로 구성되어있다.

# 34 배열 (2/5) : 배열의 효용
* alert(arr()[1]);

# 35 배열 (3/5) : 배열과 반복문의 조우
* 내장객체와 사용자정의객체

# 36 배열 (4/5) : 데이터의 추가
* li.push('f'); // 배열의 종료지점에 추가하기
* li.unshift('z'); // 배열의 시작지점에 추가하기
* li.concat(['f', 'g']); // 일시적으로 덧붙이기. 값은 추가되지 않는다.
* li.splice(1,0,'d') // 1번방 왼쪽에 d라는 값을 추가하기
  li.splice(1,1,'d') // 1번방 삭제하고 d라는 값을 추가하기

# 37 배열 (5/5) : 제거와 정렬
* li.shift(); // 0번방 제거
* li.pop(); // 마지막방 제거
* li.sort(); // 올림차순으로 정렬
* li.reverse(); // 내림차순으로 정렬

# 38 객체 (1/3) : 객체의 문법
* 객체(Object)는 index로 우리가 여러 데이터타입으로 정할 수 있다. key와 value로 구성. 그냥 Map이네.
* grades = { 'egoing' : 10 }  
* grades['egoing'] = 10; // 이런식으로 객체를 만들 수 있음
* grades['egoing'] // 호출할 때 
** grades.egoing // 이것으로도 호출 가능

# 39 객체 (2/3) : 객체와 반복문의 조우
* for(var key in grades){ // 여기서 key는 key값을 가지게 됨.
	console.log(grades[key]); // 여기서 grades[key]는 value값을 가지게 됨.
   }
	$.ajax({
		url:'/tests',
		method:'GET',
		success:function(res){
			var html = '';
			for(var list of res.list){			// value값만 가져오고 싶을때
				console.log(list);
				html += list + '<br>';
				html += list.tiNum + '<br>';
				
			}

			var str = '';
			for(var ex in res.list){			// key랑 value값 둘다 갖고오고 싶을때
				console.log(ex);
				str += ex;
				str += '추가요! <br>';
				str += res.list[ex].tiNum + '<br>';
			}
			
			document.querySelector('#pageInfo').innerHTML = html;
			document.querySelector('#pageInfo2').innerHTML = str;
		}
	})	
# 39 객체 (2/3) : 객체와 반복문의 조우

# 40 객체 (3/3) : 객체지향 프로그래밍
* 객체 안에는 키마다  키값으로 다양한 데이터형식들이 들어올수있다. 또한 키값으로 다시 키와 키값을 가진 객체가 들어올 수 있다. 호출할땐 이차원 배열로
* this란 함수가 속해있는 객체를 가르키는 변수이다.

# 41 모듈 (1/5) : 모듈이란?
* 하나의 코드를 여러 객체에서 사용하는 것.
* 함수보다 더 큰 개념. 재활용성의 목적은 같다.
* 호스트 환경 : 웹브라우저, node.js, google apps script등등의 서버 시스템

# 42 모듈 (2/5) : 모듈화

# 43 모듈 (3/5) : Node.js의 모듈화
* 웹브라우저에서 작동하는 자바스크립트는 클라이언트쪽 자바스크립트
* Node.js는 서버쪽 자바스크립트
* 다른환경에서는 모듈을 로드하는 방법이 다르구나!
var circle = require('./node.circle.js'); // node.js의 모듈을 불러오는 방법

# 44 모듈 (4/5) : 라이브러리란?
* 자주 사용하는 로직들을 재사용하기 편하게 하기 위해 정리한 일련의 코드들의 집합. 모듈과 크게 다르진 않다.
* 라이브러리는 어떠한 목표를 선정해놓은 로직들의 집합. 웹페이지를 쉽게 제어한다거나, 서버와 쉽게 통신한다거나
* 그중 하나가 jQuery
* API는 jQuery가 제공하는 명령어들의 list. 그 파일 설명서를 API Document라고 한다.

# 45 모듈 (5/5) : 라이브러리의 사용

# 46 UI,API 그리고 문서 - (1/2) : 수업소개
* Application Programming Interface 와 User Interface
공통점 : interface
차이점 : Application과 User

UI : 사용자를 대면하고 의중을 전달하는 접점이 되는 지점. 이를 User Interface라고 부른다. 물리적인 것과 소프트웨어 적인 것으로 나뉨
API : 코드의 형태를 띠고있고 사용자의 의중이 전달되는 것.

사용자 > 웹 개발자 > 브라우저 > 운영체제 > C,C++, JAVA > 어셈블리어 > 기계어 // 이와 같이 뒤집혀진 피라미드 구조로 Interface를 누리고 있다.

# 48 UI, API 그리고 문서 (2/2) : 문서보는법
* 튜토리얼 : 안내서. 환경이 어떠한 기능을 제공하는가? 사전에 알고있어야 하는 것들.
* 레퍼런스 : 사전. 튜토리얼이 문법이라면 레퍼런스는 그 언어의 사전.
* 자바스크립트의 API는 크게 "자바스크립트 자체의 API"와 "자바스크립트가 동작하는 호스트 환경의 API"로 구분된다.
* https://opentutorials.org/module/532/6533
* 자바스크립트 API : Math, 정규표현식 등등 자바스크립트가 제공하는 정규적인 API
* 자바스크립트가 동작하는 호스트 환경의 API : 웹브라우저 API, Node.js API, GoogleApps
* 커뮤니티에 질문, 검색엔진을 통해서 찾아보는 것이 최종 과정

# 49 정규 표현식 (1/7) : 오리엔테이션
* 정규표현식이란 문자열에서 특정한 문자를 찾아내는 도구.

# 50 정규표현식 (2/7) : 패턴만들기
* 컴파일 : 문자열을 치환하거나, 어떤문자가 있는지 없는지 판단하거나 이러한 작업을 하기위해서 우리가 필요한 대상을 찾는것. 패턴을 찾는것. 
* 실행 : 우리가 찾은 패턴으로 대상을 어떠한 구체적 작업을 하는 것.
* 패턴을 만드는 방법
1. 정규표현식 리터럴 : var str = "a"; 라고 정의한 뒤 var pattern = /a/; 를 하면 /~~/사이의 대상이 우리가 찾는 패턴이 됨.
2. var pattern = new RegExp('a'); // 정규 표현식 객체를 만드는 것임. 위의 예제와 같다.

# 51 정규표현식 (3/7) : RegExp 객체의 정규 표현식
* 우리가 어떤 일을 할 때 어떤 작업을 할 대상을 지정해야함. 그리고 어떤 일을 할 것인가?
* var pattern = /a/; => pattern.exec('babdjsa'); // ["ab", index: 1, input: "babdjsa", groups: undefined]  // exec는 추출
* var pattern = /a./; = > pattern.exec('fuihuaiaf'); // ["ai", index: 5, input: "fuihuaiaf", groups: undefined]
* pattern.test('bacde'); // true로 리턴. test는 우리가 찾는 정보가 있는지 없는지 찾는 것.

# 52 정규표현식 (4/7) : String 객체의 정규 표현식
* var str = 'abcdef'; => str.match(pattern); // ["a", index: 0, input: "abcdef", groups: undefined]
* str.replace(pattern, 'ABC');
* 기타 함수들은 여기서 http://opentutorials.org/course/743/6580

# 53 정규표현식 (4/7) : String 객체의 정규 표현식
* 정규표현식에는 옵션이 있는데 옵션을 통하여 좀 다르게 설정할 수 있음.
* i : 대소문자를 구분하지 않는다.
** var oi = /a/i; => "Abcde".match(oi); // ["A", index: 0, input: "Abcde", groups: undefined]
* g : 검색된 모든 결과를 배열로 리턴한다.
** var xg = /a/g; => "abcdea".match(xg); // ["a", "a"]
*** var ig = /a/ig; // 옵션은 같이 사용도 가능하다.

# 54 정규표현식 (6/7) : 캡처
* var pattern = /(\w+)\s(\w+)/; // 괄호안의 패턴은 마치 변수처럼 재사용할 수 있다.
** (\w+)\s(\w+) // ()는 패턴의 그룹, \w는 A-Z와 a~z와 0~9에 해당되는 어떠한문자, + 수량자라고 부르며 앞의 문자가 1개 이상일 경우에 이패턴의 유효해 짐.
		 \s는 스페이스. 공백이라는 뜻. 어떠한 문자 뒤에 공백이 있다면 (\w+)\s까지의 조건을 만족하게 됨.
		 따라서 위의 조건을 만족하는 것을 예제로 들자면 'Aaa AAA' 이렇게?
* 정규표현식 패턴을 시각화 할 수 있는 사이트! https://regexr.com/
* var pattern = /(\w+)\s(\w+)/; => var str = "coding everybody"; => var result = str.replace(pattern, "$2, $1"); => "everybody, coding" // $는 패턴의 그룹을 의미한다.

# 55 정규표현식 (7/7) : 치환
* var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim; // url주소 따는 문자열.
  var content = '생활코딩 : http://opentutorials.org/course/1 입니다. 네이버 : http://naver.com 입니다. ';
  var result = content.replace(urlPattern, function(url){
    return '<a href="'+url+'">'+url+'</a>';
  });
  result === "생활코딩 : <a href="http://opentutorials.org/course/1">http://opentutorials.org/course/1</a> 입니다. 네이버 : <a href="http://naver.com">http://naver.com</a> 입니다. "

# 56 유효범위 (1/5) : 전역변수와 지역변수
* 유효범위(Scope)는 변수의 수명을 의미한다.
* 지역변수안에서 var vscope = 'abc'랑 vscope = 'abc'의 차이는 꼭 알아둘 것! 전자는 지역변수내에서 죽어버리지만, 후자는 재정의의 의미를 갖기 때문에 전역변수에 영향을 미친다.

# 57 유효범위 (2/5) : 유효범위의 효용
* 지역변수내에서 항상 선언과 할당 (var i = 0;)을 해주는게 오류가 훨~씬 적다.