{} 의 형태는 javascript에서 Object의 형태입니다.

참고로 배열은 []입니다.

var obj = {aa:10, bb:20, cc:30};

의 형태를 만들기위해서는

var obj = {};

obj.aa = 10;
obj.bb = 20;
obj.cc = 30;

또는

var obj = {};

obj["aa"] = 10;
obj["bb"] = 20;
obj["cc"] = 30;

으로 해주시면 됩니다.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#1 ECMA Script6
	자바스크립트(ECMA Script, BOD, DOM을 통해 구현됨)의 core스크립트 언어
	브라우저뿐만 아니라 node.js 통해 서버 개발환경에서도 사용
	타입스크립트도 따르고 있음

#2-1 let과 const
	* ES6에서 처음으로 추가됨
	* 변수와 상수를 구분
	* let으로 선언되면 다시 사용 불가, 블록레벨 스코프의 특징을 갖음(블록 단위로. 전역변수와 지역변수 개념이 없음), 같은 블록에서 같은 이름으로 선언 불가.
	* const는 선언하면서 초기화 필수

   ex)1		var msg = "hi";
		var msg = "hello"; 	// var는 가능
		
   ex)2		let msg = "hi";	
		let msg = "hello";	// 에러 발생

   ex)3		let myName;
		console.log(myName); // let을 정의하지 않으면 undefind로 출력됨

   ex4		const  myName;
		console.log(myName) // 할당과 동시에 정의하지 않아 구문오류가 발생됨
				      const 변수는 재할당이 불가능함.

   ex)5		const name = 'kim';
		name = 'cho';	// 타입에러 발생

   ex)6		const animal = {
			name : 'cat',
			weight : 5
		};
		animal.name = 'dog';
		console.log(animal);	// dog가 출력됨. const 변수가 참조형일 경우 const 객체의 프로퍼티는 변경이 가능하다.
	
# 2-2 Block-scope
	* {}로 감싸진 유효범위
	* 기존의 var는 funtion scope
	* var는 function scope, let은 block scope

   ex)1		var num = 1;
		function printNum() {
			console.log(num);
			var num = 2;
			console.log(num);
		};			// funtion레벨에서 호이스팅 발생
		printNum(); 		// undefined, 2 출력

   ex)2		var product = 'phone';	// 전역 스코프에 선언된 변수
		if(true) {
			var product = 'tv';	// 지역 스코프에 선언된 변수가 호이스팅되어 전역값을 변경해버림.
			console.log(product);
		}; 			// 함수가 아닌 블록일 때?
		cosole.log(product);		// tv, tv 출력

   ex)3		let product = 'phone';	
		if(true) {
			let product = 'tv';	
			console.log(product);
		}; 			// let을 사용한다면?
		cosole.log(product);		// tv, phone 출력

# 2-3 Temporal Dead Zone
	* let은 변수의 유효 범위를 블록 스코프로 처리해 줌.
	* 따라서 ES6에서는 가급적 var를 지양하고 let(원시형 변수)과 const(상수 및 참조형) 사용
   ex)1		let product = 'phone';	
		if(true) {
			console.log(product);
			let product = 'tv';	
		}; 			// 블록내에서 호이스팅이 발생된다면?
		cosole.log(product);		// 참조에러 발생. let은 초기화가 한번에 이루어지지 않고 선언문에 도달해야 초기화가 이루어짐.
	
# 3 Template Literals(템플릿 문자열)
	* 백틱(`)문자를 사용
	* ${} 표현식
	* 템플릿 문자열 표현식 처리

   ex)1	let name = "jack";
	let weight = 60;	
	console.log(`
		name = ${name}
		weight = ${weight}
		weight + bagWeight = ${weight +3};	// 템플릿 문자열의 표현식에다 계산식도 넣을 수 있다.
	`);	// 멀티라인 스트링을 만들 수 있음

# 4 Destructuring(비구조와 할당)
	* 구조화된 오브젝트나 배열을 비구조화 하여 변수에 할당.
	* 객체 또는 배열에서 데이터를 분석하여 각각의 변수에 할당

   ex)1	let data = [{
		count : 1,
		list : [{
			name : ["jack","paul"],
			group : "sports"
		}]
	}];

	let [{count, list : [{name, group}]}] = data;
	console.log(`
		count : ${count}
		group : ${group}
	`);	// count : 1  
		   group :sports

   ex)2	function productObject({name, price, color}) {
		return {
			productName : "this product name : " + name,
			addToCart(){
				console.log(name + "is added");
			},
			detailView(){
				console.log(`
					${productName}
					price : ${price}
					color : ${color}
				`);
			}
		};
	}										//  함수에서 객체를 리턴할 때

	var {productName, addToCart, detailView} = productObject({name : "apple", price : 199, color : "silver"} // 비구조화 할당을 통해 여러 변수로 받을 수 있다
	addToCart();
	detailView();
			// apple is added
			   this product Name : apple
			   price : 199
			   color : silver
 
# 5 class
	* 코드의 복잡도를 극복하기위해 클래스를 정의하여 사용한다.
	* class 상속또한 가능하다. 따라서 객체지향 프로그래밍도 가능하게 함.
   ex)1	class Lang {
		contructor(name){			// 생성자를 정의. name은 매개변수로 선언됨.
			this.name = name;
		}
		getName(){
			return this.name;
		}
	}
	let lang = new Lang("Language");		// new로 객체를 만들어서 생성한다.
	console.log("lang.getName();" + lang.getName());	
		// lang.getName();Language
		
   ex)2  	class Lang {
		contructor(name){			
			this.name = name;
		}
		getName(){
			return this.name;
		}
	}
	let lang = new Lang("Language");		
	console.log("lang.getName();" + lang.getName());	

	class JavaScript extends Lang{
		constructor(name) {
			super(name);
		}
	}
	let js = new JavaScript("JavaScript");
	console.log("js instanceof JavaScript : " + (js instanceof JavaScript));
	console.log("js instanceof Lang : " + (js instanceof Lang));
	console.log("js.getName() : " + js.getName());
		// lang.getName();Language	
		   js instanceof JavaScript : true
 		   js instanceof Lang : true	
		   js.getName() : JavaScript

# 6-1 Arrow Function(화살표 함수)
	* 익명 함수(function () { })를 간략하게 표현(()=>{ })  할 수 있는 표현식
   ex)1 	const myFunction = ()=>{
		console.log("ES6 arrow function");
	};
	myFunction();
	
	* 함수 실행에서의 this는 객체지향의 관점에서 콜백함수를 정의할 때 더유연하고 쉽게 컨텍스트를 활용할 수 있음.
   ex)2	<script>
		var name = "ES5";	// 사실 진짜 객체이름은 window.name = "ES5"임.
		
		function Lang() {
			this.name = "ES6"; 	// 여기서 말하는 this는 보통 window의 전역객체
			
			setTimeout(function(){
				console.log("Global name is " + this.name);	// ES5는 c	all(), apply()를 통해 this를 지정해줬어야 했음.
			},100);
			setTimeout( ()=>{
				console.log("My name is " + this.name);		// 화살표 함수는 기본이 call()
			},100);
		}
		
		var lang = new Lang();
	</script>
		// Global name is ES5
	 	   My name is EX6

# 6-2 Arrow Function(즉시 실행함수) 
	* 앞서 변수를 이용해 화살표 함수를 정의했지만 익명 함수는 즉시 실행함수 또한 많이 사용함
	* 즉시 실행 함수는 한번의 실행만 필요로 하는 초기화 코드 부분에 많이 사용됨.
   ex)1 	(function(lang) {
		console.log(lang);
	} ("ES5"));	// 기존 방법, ES5부분이 인자로 바로 들어감.
	((lang)=>{
		console.log(lang);
	})("ES6");  // ES6 방법. 괄호로 먼저묶고 함수로 호출해야함.

# 7 Default Parameter(기본 매개변수)
	* 자바스크립트에서는 함수의 기본값이 undefined임.
   ex)1 	function animal(name) {
		var name = name || "dog";
		console.log(name);
	}
	animal();
	animal(null);
	animal(false);	// dog dog dog 출력

	* ES6에서는 인자가 넘어오지 않을 때 값을 설정할 수 있음.
	* 주의할 사항은 앞선 예와 달리 null, false, 0, 공백에 대해서 적용이 안되고 undefined에만 적용됨
   ex)2	const defaultColor = "red";
	function defaultValue(value, color = defaultColor, myArray = []) {
		myArray.push(value, color);
		return consloe.log(myArray);
	}
	defaultValue("strawberry");	
	defaultValue("apple", undefined);
	defaultValue("banana","yellow");	// [ 'strawberry', 'red' ]
					   [ 'apple', 'red' ] 
					   [ 'banana', 'yellow' ] 출력 

# 8-1 Iterator & for-of(루프 문법)
	* 기존 언어에서는 배열과 같은 자료구조를 순환할 때 iterator를 사용
	* 자바스크립트에서는 for, forEach, for-in을 사용하였지만 forEach는 브레이크로 루프를 중단할 수 없었고 for-in은 객체의 속성을 순회할때만 사용했었음.
	* ES6에서는 iterator와 for-of 키워드를 사용함
	* for-of는 아래 예 뿐만아니라 iterable(순회가능한) 객체들은 모두 사용이 가능하다.
   ex)1 	const myArray = [10,20,30];
	for(let value of myArray) {
		cosole.log(value);
	}

# 8-2 Symbol
	* 객체에 다른 어떤것과도 다른 유니크한 속성을 만들기 위한 타입.
   ex)1	let name = Symbol("kim");
	console.log(typeof name);	// symbol 출력

	* typeof로 반환되는 타입은 undefined, Boolean, String, Number, Object, Function, Symbol
	* typeof null은 Object로 출력됨

	* Symbol의 가장 큰 특징은 고유한 것
   ex)2 	const myObject = {				// myObject 객체는 symbol1과 symbol2라는 두개의 속성을 갖고있으며 My Symbol이라는 같은 description을 갖고있다.
		symbol1 : [Symbol("My Symbol")],
		symbol2 : [Symbol("My Symbol")]
	};
	console.log(myObject.symbol1 == myObject.symbol2);	// symbol은 고유값이기 때문에 false 출력
  	
	* 자바스크립트의 객체 루프인 for-in이나 Object.keys 메소드는 Symbol은 출력되지 않는다.
   ex)3 	const myObject = {};

	myObject.a = "apple";
	myObject["b"] = "book"

	let c = Symbol("c");
	myObject[c] = "cat";
	myObject[Symbol("d")] = "dog";
	
	for(let key in Object) {
		console.log("key in : " + key);
	}
	console.log("Object.keys(myObject) : " + Object.keys(myObject)); 	// Object.keys(myObject) : a,b 출력

	console.log("myObject[c] : " + myObject[c]);		// MyObject[c] : cat
	console.log(Object.getOwnPropertySymbols(myObject));	// [ Symbol(c), Symbol(d) ]

	* 이처럼 심볼 객체를 정의해서 사용할 수도 있지만 자체적인 표준으로 정의되어 있는 심볼이 몇개 있는데 그중 하나가 Symbol.iterator
	* 위 심볼의 특성을 갖고 있다면 이 객체는 이터러블 하다 라고 정의된 것.
	* 그렇다면 이 객체는 for-of 구문에 사용할 수 있다.

# 8-3 [Symbol.iterator()]
	* for-of 루프는 위의 symbol.iterator 메서드 호출로 시작이 되고 그반환값으로 이터레이터 객체로 리턴이 됨
	* iterator 객체는 next()메서드와 value(현재 이터레이터가 가르키는 값), done(이터레이터가 끝까지 도달했는지 true,false)속성을 가진다.
	* 그리고 next 메서드를 내부적으로 반복하면서 컬렉션의 객체들을 순회한다.
   ex)1	const set =new Set([10,20]);
	
	const myIter = set.entries();
	console.log(myIter.next());	// { value: [ 10, 10 ], done: false }
	console.log(myIter.next());	// { value: [ 20, 20 ], done: false }
	console.log(myIter.next());	// { value: undefined, done: true }

	* ES6에 추가된  for-of는 모든 이터러블 객체에서 사용할 수 있다. 

# 9 Rest Parameters(나머지 매개변수)
	* ES6에서는 함수에 대한 지원 범위를 크게 확대하기 위해 가변인자에 대한 기능을 추가함.
	* "..."로 표현하며 배열 형태로 받기때문에 .length가 가능하다.
   ex)1 	function myFunction(a,b,c,d, ...rest) {
		console.log(a,b);		// 1 2
		console.log(rest);		// [ 5, 6, 7, 8 ] 
		console.log(rest.length);	// 4
	}
	myFunction(1,2,3,4,5,6,7,8);

	* 전개연산자는 함수를 호출할 때 키워드를 사용하면 해당 배열을 펼쳐서 여러개의 인자로 넘겨주는 것.
	* 변수에 할당하지 않고 배열에 바로 ... 키워드를 사용할 수도 있다.
	* 데이터가 동적으로 바뀌는 환경에서 가변인자를 다루기에 유용하게 사용할 수 있다.
   ex)2	function rest(a,b,c, ...rest) {
		console.log(b, c);

		for(let i of rest) {
			console.log(i);
		}
	}

	var spread = [2, 3];
	
	rest(1, ...spread, 4, ...[5, 6]);	// 2 3
				   4
				   5
				   6 	

	* 나머지 매개 변수는 두개 이상의 요소를 하나로 모으는 것이지만 전개연산자는 배열이나 객체를 확장하는 것으로 이와 대조된다.

# 10-1 Map
	* 자바스크립트에서는 객체와 배열이 Map기능을 수행하고있었지만 특정값이 있는지 찾아내기위해 별도의 처리과정이 필요해 불편했음
	* Map은 key와 value가 한쌍인 컬렉션
   ex)1	const myMap = new Map();
	myMap.set("Lang", "JavaScript");

	const myData = new Map([
		["key1", "value1"],
		["key2", "value2"]
	]);
	console.log(myData.get("ket1"));	// value1 
   
   ex)2	const myMap = new Map();
	myMap.set("Plugin", "Update"),set("refactor", 6).set("Code", 5);
	
	const myArray = [["Plugin", "Update"], ["Refactor", 6], ["Code", 5]]; 	// 이터러블한 객체이기 때문에 for-of구문 사용가능
	
	for(let i of myArray) { 
		myMap.set(...i);
	}
	myMap.delete("Hello");	// Map의 key는 유일하기때문에 delete로 삭제가능.
	for(let [key, value] of myMap) {	// myMap 객체가 루프를 돌며 리턴된 형식을 let 선언자 오른쪽에 나열해 디스트럭처링이 이루어짐
					   이를 통해 key와 value가 별도의 변수로 분리됨.
		console.log(key + "," + value);	
	}
			
# 10-2 MapIterator
	* 앞서 for-of 구문으로 map을 순환할 수 있었음. 이외에도 map은 다양한 메서드를 지원함   
   ex)1	const myMap = new Map();
	const myArray = [["Plugin", "Update"], ["Refactor", 6], ["Code", 5]];
	for(let i of myArray){
		myMap.set(...i);
	}
	const myKeys = myMap.keys(),
		myValue = myMap.values(),
		myIter = myMap.emtries();
	console.log(myKeys);	// MapIterator { 'Plugin', 'Refactor', 'Code' } 
	console.log(myValue);	// MapIterator { 'Update', 6, 6} 
	console.log(myIter);		// MapIterator { [ 'Plugin', 'Update' ] , [ 'Refactor', 6 ], [ 'Code', 5] }
	
	console.log(myIter.next());	// { value: [ 'Plugin', 'Update' ], done: false }
	console.log(myIter.next());	// { value: [ 'Refactor', 6 ], done: false }
	console.log(myIter.next());	// { value: [ 'Code', 5 ], done: false }
	console.log(myIter.next());	// { value: undefined, done: true }

# 10-3 Filtering & Set
	* Map을 특정 조건으로 필터링하여 다른 Map담아보자
   ex)1 	const myMap = new Map();
	const myArray = [["Plugin", "Update"], ["Refactor", 6], ["Code", 5]];
	for(let i of myArray) {
		myMap.set(...i);
	}
	const newMap = new Map (
		[...myMap].filter( ([a,b])=> b==6 ) 
	);
	console.log(newMap);	// Map { 'Refactor' => 6 }
				// 이와같이 Map에 전개연산자를 사용하면 풀어서 배열로 반환해주기 때문에 편리함

	* Set은 자바스크립트의 배열과 유사하지만 중복을 허용하지 않는 집합
	* Map과 큰차이점은 key가 없이 value만 존재한다.

   ex)2	var set = new Set();
	set.add("ECMAScript").add("6");
	console.log(set.has("ECMAScript"));	// true
	console.log(set.size);		// 2
	console.log(...set.values();		// ECMAScript 6	
	
	* 기존 자바스크립트는 Object나 Array 자료구조를 사용하였지만 ES6에서는 map과 set이 추가됨.

# 11-1 Generator
	* ES6에서는 Generator 기능이 표준으로 정의됨.
	* generator는 이터러블한 객체임
	* 일시정지와 재시작 기능을 사용할 수 있음
	* generator 객체의 next메서드를 호출 할 때 마다 실행을 재개 해 yield 구문까지 실행되고 다시 스스로 실행을 멈춤
	* 다음에 next 메서드가 호출되었을 때는 다시 그 이후부터 실행을 재개함.
   ex)1	function*  intro(name){				// function* 으로 시작하는 함수를 제너레이터 함수라고 부름.
		console.log("환영합니다");
		yield name + " 님 안녕하세요";		// yield 구문의 문법은 리턴문과 비슷하지만 제너레이터의 실행을 멈췄다가 다음에 다시 이어서 시작할 수 있게 만듬.
		yield "Apple 지원에 오신 것을 환영합니다";
		yield "도움이 필요하시면 언제든지 문의하십시오";
		yield "다음에 또 만나요";
	}
	let iter = intro("jack");	// 제너레이터 함수를 호출하면 멈춰진 제너레이터 객체를 리턴한다. 리턴된 제너레이터 객체는 이터레이터이다.	
	console.log(iter.next());	// { value: 'jack 님 안녕하세요', done: false }
	console.log(iter.next());	// { value: 'Apple 지원에 오신 것을 환영합니다.', done: false }	
	console.log(iter.next());	// { value: '더움이 필요하시면 언제든지 문의하십시오', done: false }
	console.log(iter.next());	// { value: '다음에 또 만나요', done: false }
	console.log(iter.next());	// { value: undefined, done: true }

	* 제너레이터의 반복이 끝나는 시점은 3가지가 있다.
 	* 위의 예처럼 함수의 끝부분까지 모두 수행되어 이터레이터가 종료되는 경우.
	* generator함수에서 return 사용하는 경우.
	* error가 발생하는 경우.

# 11-2 yield
	* yield value를 사용하면 한가지 값을 반환할 수도 있고
	* yield에 별이 붙은 이터러블한 객체를 사용하면 해당되는 이터러블 값을 순차적으로 반환할 수 있다.
   ex)1 	function* myGenFn() {
		yield* [1,2,3,4,5,6,7];
		yield 8;
		yield 9;
	}
	
	let iterator = myGenFn();

	for(const n of iterator) {
		console.log(n);
	}			// 1 2 3 4 5 6 7 8 9

	* next메서드는 다음값을 얻는 역할을 한다.
	* 일반적인 이터레이터의 next()와 다르게 제너레이터 객체의 next()는 인자를 받을 수 있다.
   ex)2	function* foo() {
		console.log(yield);
		console.log(yield);
		console.log(yield);
	}
	let iter = foo();
	iter.next();
	iter.next(1);
	iter.next(2);
	iter.next(3);	// 1 2 3

	* 제너레이터 함수가 값을 쓰고, 제너레이터 객체의 이터레이터 인터페이스로 값을 읽는 것 뿐만 아니라
	  제너레이터 객체에 값을 쓰고 제너레이터 함수가 값을 읽어 갈 수 도 있다.

# 11-3 return & throw
	* return 메서드는 매개변수로 온 값을 value로 반환하고 제너레이터를 종료시킨다.
   ex)1	function* gen() {
 		yield 1;
		yield 2;
		yield 3;
	}
	
	let g = gen();
	
	console.log(g.next());	// { value: 1, done: false }
	console.log(g.return("foo"));	// { value: 'foo', done: true } 	
	console.log(g.next());	// { value: undefined, done: true } 	// 이미 종료된 제너레이터 값을 반환함

	* throw 메서드는 인자로 받은 에러를 발생시키고 제너레이터를 종료시킴
   ex)2 	function* genereator() {
		try{
			yield 'foo';
		}
		catch(err) {
			console.log(err.message);
		}
	}
	
	let iterator  = generator();
	
	let foo = iterator.next();
	console.log(foo.value);	// foo bar

	let nextThing = iterator.throw(new Error('bar'));	

# 12-1 Promise
	* 자바스크립트에서 기존에 사용하던 콜백 패턴은 에러 처리가 쉽지 않았음
	* 이러한 비동기 처리를 쉽게 하기위해 ES6에서는 언어레벨에서 제공하는 기능이 추가됨

	* 프로미스는 자바스크립트에서 event 및 콜백보다 비동기 프로그래밍을 개선하기 위해 설계되었음
	* 프로미스는 대기상태에서 시작하여 성공적인 실행으로 이행되거나 실패로 인해 거부된다.
	* new Promise로 프로미스 객체를 생성하면 callback 함수 인자로 resolve와 reject를 사용할 수 있으며
	* resolve()가 실행되면 fulfiled, reject()가 실행되면 rejected 상태가 됨.
	* then 메서드를 사용하면 수행 및 거절 핸들러를 할당할 수 있으며
	* catch 메서드를 사용하면 거절 핸드러만 할당할 수 있다.

	* 프로미스는 생성자 함수에 new 키워드를 사용하여 프로미스 인스턴스 객체를 생성해 사용한다
   ex)1 	const promise = new Promise(function(resolve, reject) {
		// 특정 함수 호출이나 연산이 비동기로 처리될 코드를 작성
		// 완료되었을 때 처리될 함수나 에러일 때 처리하기 위한 함수를 설정. 처리가 끝나면 resolve 또는 reject를 호출한다.
	})

	* then() 메서드는 모든 프로미스에 존재하며 두개의 파라미터를 갖는다.
		then(function(){}, function(){})	// 첫번째 파라미터는 프로미스가 수행될 때 호출 할 함수. 비동기 작업과 관련된 추가 데이터가 이 처리함수에 전달됨
					// 두번째 파라미터는 프로미스가 거부될 때 호출되는 함수. 수행기능과 마찬가지로 거부 기능에는 거부와 관련된 추가 데이터가 전달 됨.
   	* then() 메서드를 통해 프로미스 함수를 호출하면 매번 새로운 프로미스를 생성해 반환한다.
	* resolve()를 호출하면 비동기 작업이 트리거가 됨.
	* 아래 예와 같이 then() 메서드에 대한 호출이 마지막 라인보다 앞에 있더라도 then()메서드는 비동기 적으로 실행된다.
   ex)2 	const promise = new Promise(function(resolve, reject) {
		console.log("Promise");
		resolve();
	});
	promise.then(function() {
		console.log("Resolved");
	});
	console.log("Hi");	// Promise Hi Resolved
			// 실제로 먼저 실행되지 않으며 이는 수행 및 거절 핸들러가 job queue의 끝에 추가되기 때문이다.
	
	* 프로미스는 정상적으로 수행되었다면 "이행(fulfilled)"되었다고 함.
	* 실패되었다면 "거부(rejected)"
	* then 메서드를 사용하면 수행 뿐만 아니라 거절 핸들러를 할당할 수 있다.
	* 아래 예와같이 then메서드를 통해 두 개의 익명함수를 받았고 reject 함수를 호출해 거부 이유를 기록함.
   ex(3	const pro2 = new Promise(function(resolve, reject) {
		reject("rejected!");
	});
	pro2.then(function(contents) {
		console.log(contents);
	}, function(err) {
		console.error("err: " + err);
	});	// err: rejected!

# 12-2 chaining & catch
	* 프로미스 체이닝은 하나의 프로미스에서 다음 프로미스로 데이터를 전달할 수 있음
	* then 메서드를 호출할 때마다 새로운 프로미스가 생성된 것과 같이 예제에서는 수행핸들러에 리턴값을 지정하여 체인을 따라 데이터를 계속 전달함.
   ex)1 	let promise = new Promise(function(resolve, reject) { 
		resolve(1);
	})
	
	promise.then(function(value) {
		return value + 9;
	})
	.then(function(value) {
		return value * 2;
	})
	.then(function(value) {
		return value /4;
	})
	.then(console.log);	// 5

	* 프로미스는 거절 처리만 전달할 때 then 메서드의 두번째 인자와 동일한 역할을 하는 catch메서드가 있다.
   ex)2	const promise = new Promise(function(resolve, reject) {
		resolve();
	});

	promise.then(function() {
		throw new Error("Error in then()");
	}, function(err) {
		console.log("then error : ", err);
	});	// 오류메세지가 빨갛게 출력됨(제대로 못잡는 경우)
		// then 메서드에서 두번째 인자로 오류를 받는 경우. 이 경우는 then 메서드의 첫번째 콜백함수 내부에서 오류가 나는 경우 제대로 잡아내질 못한다.
   
   ex)2-1	const promise = new Promise(function(resolve, reject) {
		resolve();
	});

	promise.then(function() {
		throw new Error("Error in then()");
	}).catch(function(err) {
		console.log("then error : ", err);
	});	// 오류메세지가 검정색으로 출력됨(예상된 에러일 경우)

	* catch 메서드도 마찬가지로 체이닝이 가능하므로 catch 메서드 뒤에 then 메서드를 붙여 안전하게 프로미스 체이닝을 이어가는 것도 가능하다.

# 12-3 all
	* 앞에서는 하나의 프로미스에 응답하는 방법을 다루었음
	* 그러나 때로는 다음작업을 결정하기 위해 여러 프로미스의 진행 상태를 모니터링 해야 할 수도 있음. 
	* all 메서드는 입력으로 받은 모든 프로미스를 성공하면 resolve하고 그렇지 못한 경우는 reject함.
   ex)1 	const pro1 = (param) => {
		return new Promise((resolve, reject) => {
			param ? resolve("이행1") : reject("거부");
		});
	};
	
	const pro2 = (param) => {
		return new Promise((resolve, reject) => {
			param ? resolve("이행2") : reject("거부2");
		});
	};

	Promise.all( [pro(true), pro2(true)] ).then((value)=>{	// Promise.all 메서드는 모니터링 할 프로미스들을 배열과 같은 이터러블 파라미터로 받아들임.
							// 예제에서는 pro1과 pro2를 받고 모든 프로미스의 값이 결정되면 수행되어 값 전체가 출력됨.
		console.log("all프로미스 값 " + value);
	});	// all프로미스 값 이행1, 이행2

	* Promise.all 메서드에 전달된 프로미스가 거절되면 다른 프로미스가 완료될 때까지 기다리지 않고 해당 프로미스는 즉시 거절함.
	* 아래 예제에서 pro2는 거절되자 pro4에 대한 거절 핸들러는 pro1 또는 pro3가 실행 완료될 때까지 기다리지 않고  즉시 호출되며 Array가 아닌 단일 값을 즉시 받는다.
	* 예제에서  그 값은 pro2로부터 반영된 거절 값 20이 출력됨.
   	
ex)2	const pro1 = new Promise(function(resolve, reject) {
		resolve(10);
	});
	const pro2 = new Promise(function(resolve, reject) {
		reject(20);
	});
	const pro3 = new Promise(function(resolve, reject) {
		resolve(30);
	});
	const pro4 = Promise.all( [pro1, pro2, pro3] );
	pro4.catch(function(value) { 
		console.log(Array.isArray(value)); 	// false
		console.log(value);			// 20
	});
# 13 Asynchronous
	* 비동기란 특정코드가 완료될때까지 기다리지 않고 다음코드를 먼저 실행하는 것
	* 웹용으로 작성된 언어로써 자바스크립트는 처음부터 클릭이나 키입력같은 비동기 상황 상호작용 이벤트에 응답할 수있어야했음
	* Node.js는 이벤트대신에 callback을 사용
	* 콜백은 고차함수를 잘 지원하는 자바스크립트의 특징때문에 가장 많이 사용되는 비동기 프로그래밍 양식이 되었다.
	* 하지만 비동기 처리로직을 위해 콜백함수를 연속해서 사용하면 콜백 지옥이 발생되는 문제가 있다.
	* 또한 기존방식의 비동기 프로그래밍에서는 예외를 처리하기 어려운 문제도 있다.
	* ES6에서는 Generator와 Promise를 통해 이를 개선하였다.
	* 따라서 비동기 프로그래밍을 다루는 제너레이터와 프로미스를 함께 활용해보자

# 13-1 callback hell
	* 웹서비스를 개발하다보면 서버에서 데이터를 받아와 화면에 표시할 때까지 인코딩, 사용자 인증 등을 처리해야하는 경우가 생김.
	* 만약 이 모든 과정을 비동기로 처리해야 한다고 하면 어쩔 수 없이 다음과 같은 콜백함수를 연속으로 사용하게 됨
	* 이러한 이유는 콜백함수를 다른 함수로 전달하는 순간 그 콜백함수에 대한 제어권을 잃어버리기 때문. 
	* 이러한 현상은 "callback hell"이라고 하며 가독성도 떨어지고 에러가 발생하기도 쉽고 디버깅도 어렵게 됨.
    ex)1 	$.get('url', function(response) {
		userValidator(resonse, function(data) {
			userRegister(id, function(data) {
				userDisplay(result, funtion(data) {
					console.log(text);
				});
			});
		});
	});

	* 싱글 스레드인 자바스크립트이지만 앞의 콜백지옥을 개선해보기 위해 중첩해서 선언했던 콜백 익명 함수를 각각의 함수로 구분하여 받을 수 있다.
 	* validator메서드로 키 입력을 받은 데이터를 처리함. 결과값인 user가 전달되고 register 함수로 등록을 마침.
	* user를 가지고 display함수를 호출하면 결과가 나타남.
   ex)2-1 	function validator() { /* ... */ }
	function register(user) { /* ... */ }
	function display(user { /* ... */ }

	function greeting() {
		const user =validator();
		register(user);
		display(user);
	}
	* 하지만 자바스크립트에서 항상 이런식으로 처리할 수는 없음.

	* 이 코드를 promise를 이용하여 비동기 처리를 해보자.
   ex)2-2 	function validator() { /* ... */ }
	function register(user) { /* ... */ }
	function display(user { /* ... */ }]

	function greeting(input) {
		return validator()
			.then(user => register());
			.then(user => display());
	}
	* 다음과 같이 프로미스는 웹 애플리케이션을 구현할 때 서버에서 받아온 데이터를 화면에 표시할 때 주로 사용된다.
	* 하지만 화면에서 서버로 데이터를 요청했을 때 서버가 그 요청에 대한 응답을 언제 줄지도 모르는데 마냥 다른 코드를 실행하지 않고 대기할 수는 없다.
	* 또한 이 코드보다 앞서 보았던 코드가 훨씬 직관적이고 이해하기 쉽다.

	* 이를 극복하기 위해 generator로 비동기 처리를 해보자.
   ex)2-3 	function validator() { /* ... */ }
	function register(user) { /* ... */ }
	function display(user { /* ... */ }]
	
	const myGenerator = function* () {
		const user = yield validator();
		yield register(user);
		yield display(user);
	};
	* 훨씬 직관적이며 알아보기가 쉽다.
	* 제너레이터 함수호출로 생성된 이터레이터의 next메서드를 호출하여 yield 구문의 validator가 완료되면 실행을 멈추고 제어권을 넘겨줄 것.
	* 그런데 이후 실행이 계속되려면 validator 함수 안에서 직접 next메서드를 호출할 수 밖에 없게된다.
	* 이것은 콜백 패턴과는 또 다른 의미의 제어권 상실이라고 볼 수 있다. 

	* 이를 극복하기 위해 generator와 promise를 같이 사용해보자.
	* 이번에는 모든 함수가 promise를 반환하도록 바꿈.
   ex)2-4 	const validator = () => { return new Promise(...) };
	const register = () => { return new Promise(...) };
	const display = () => { return new Promse(...) };

	const myGenerator = function* () {
		const user = yield validator();
			yield register(user);
			yield display(user);
		};
	* 이제 next메서드를 호출하면 yield 구문의 validator 함수가 실행되어 프로미스가 리턴된다.
	* 이 프로미스가 이행되면 then 메서드가 실행된다.
	* 이 과정을 외부에서 제너레이터가 끝날 때까지 반복해서 실행시켜 주면 각각의 함수가 제어권을 직접 다루지 않는 것이 가능하다.
	
# 13-2 Improved Method Practice
   ex)1 	const util = {};
	
	util.logThunk = function(message) { 
		return message;
	};
	
	* 아래의 프로미스 함수들을 반환하는 함수
	function procPromise(data, action) {
		return new Promise(function (resolve, reject) {
			!!data ? resolve(data) : reject(action);
		});
	}

	* 페이지에 입력된 사용자 정보를 받아와 파싱, 인증 ,출력 등의 로직을 담당하는 함수 userValidator(), userRegister(), userDisplay() 함수는 각각의 프로미스를 반환한다.
	const userValidator = function() {
		let isValid = true;
		let validationError = {
			errors : {}
		};
		const user = {
			id : 'kim'
			password : 'efjisa123'
		};
		return {
			userIsValid : function () {
				if (user.id == '' || user.password == '' || user.password.length < 10) {
					isValid = false;
					validationError.errors.message = 'userValidator fail!';
				}
				if (!isValid) {
					return procPromise(isValid, util.logThunk(validationError.errors.message)));
				}
				else return procPromise(user);
			}
		};
	};

	const userRegister = function(user) {
		let success = true;
		let message = "";
		return {
			registerUser : function(user) {
				if(res = false) {
					success = res;
					message = "registerUser fail!"
					return procPromise(success, util.logThunk(message));

				}
				else {
					return procPromise(success);
				}
			}
		};
	};
		
	const userDisplay = (user) => {
		let success = true;
		let message = "";
		return {
			showRegistrationThankYou: function(user) {
				if(err = false) {
					success = err;
					message = " showRegistrationThankYou fail!"
					return procPromise(success, util.logThunk(message));
				} else {
					// document.getElementById("").innerHTML = "";
					message = `${user.id} 님 안녕하세요.`;
					return procPromise(message);
				}
			};
		};

	const users = {};
	users.registration = function(validator, register, display) {
		return {
			validateAndRegisterUser: function* () {
				const user = yield validator().userIsValid();	// ##2
				yield register().registerUser(user);		
				yield display().showRegistrationThankYou(user);
			}
		};
	};
	
	## next, yield, then 순서로 순환에 따라 실행된다!
	* runner()는 이전단에 리턴과 같이 되는 형식의 어떠한 제너레이터가 들어오더라도 실행시켜주는 함수이다.
	* runner()는 먼저 파라미터로 제너레이터를 받아 실행하여 이터레이터를 만든다
	const runner = (genFunc)=> {
		try {
			if(genFunc.constructor.name !== "GeneratorFunction") {
				throw new Error(genFunc + " 은 제너레이터가 아닙니다.");
			}
			let myIter = genFunc();	// 제너레이터 함수를 최초 실행한 후 return된 iterator
			let returnOfNext = {};
			const runNext = (genObj) => {	// 작업을 시작하기위해 runNext에서 next()를 호출하게 된다. 						
				returnOfNext = myIter.next(genObj);	// ##1 next()를 실행했으니 첫번째 yield 구문이 실행되고 Promise 리턴
				console.log('myIter : ', returnOfNext);	// returnOfNext의 값을 promise로 반환한다.
								// value: Promise {<resolved>: {...}} 출력
			};
			(function run(genObj) {			// *2 run 함수의 인자로 전달해 재귀되면서 반복적으로 실행됨.
				runNext(genObj);
				if(!returnOfNext.done) {		// *3 returnOfNext의 done 프로퍼티에 true를 반활할때까지 순환한다.
					returnOfNext.value.then(run)	// ##3 *1 이 반환값을 then()에서 
					.catch(function(err) {
						console.log('then error : ', err);
					});
				} else { 
					return console.log('end generator');
				}
			})();
		}
		catch(e) {
			console.log("error: " + e.message);
			return;
		}
	};
	runner(users.registration(userValidator, userRegister, userDisplay).validateAndRegisterUser);			
	
   result) 	myIter : { value: Promise { { id: 'kim', password: 'efjisa123' } }, done: false } 
	myIter : { value: Promise { true }, done: false }
	myIter : { value: Promise { 'kim 님 안녕하세요.' } , done: false }
	myIter : { value: undefined, done: true }
	end generator

	* 프로미스는 비동기 작업이 리턴할 수 있는 공통 인터페이스를 제공하며 제너레이터는 yield 연산자를 사용하여 
	  비동기 응답을 기다리고 적절하게 응답할 수 있다. 제너레이터와 프로미스를 결합할 때 비동기 프로그래밍에 더욱 유용한 도구가 된다.
	
	