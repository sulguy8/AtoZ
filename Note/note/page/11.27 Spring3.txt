* private static final Logger logger 와 System.out.println 과의 차이점.
logger.info("hello", locale); // info : 찍히고 경로까지 다나옴. syso보다 경제적임. {} 여기에 locale이 들어감.

* private static final Logger logger = LoggerFactory.getLogger(HomeController.class); // 클래스마다 logger쓰려면 선언해줘야함.
  lombok을 이용해서 @Slf4j를 선언하면 위에것을 대신할 수 있다.
흐름을 읽고 근거를 갖고 행동하는 것.

String str ="나는";
String naem = "홍길동";
logger.info("{} {}입니다", str, name); // 나는 홍길동 입니다.

System.out.println("hello", locale); // 이제 왠만하면 안쓰는게 나음.
* web.xml 라이브러리 // 여기서 Listener때문에 root-context.xml을 바라봄
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

* pom.xml 라이브러리
<properties>
		<java-version>1.6</java-version>
		<org.springframework-version>3.1.1.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
</properties>  // 별 의미는 없고 여기있는 버전으로 쓸거야! 여기서 숫자만 바꿔줘도 버전업이 됨.


		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency> // 여기서 메이븐에 접근하는것임

* root-context.xml // 데이터 베이스 셋팅은 여기다가.

* dbcp2(우리는 자바버전이 1.6이기때문에 이거씀)나 히카리(가장속도가 빠름)가 가장많이쓰임.
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency> // 이게 있어야 jsp가 컴파일이 됨.

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency> // 자바로 하여금 테스트를 해줄수 있게 하는것.

1. 해당 config를 읽어야함
2. 데이터 소스를 집어넣어야하는데 sqlsession factory에서 만들어서 집어넣을거임

	@Autowired
	private BasicDataSource bds;
	
	@Override
	public List<Map<String, String>> selectUserList() {
		Connection con = null;
		List<Map<String,String>> userList = new ArrayList<Map<String,String>>();
		try {
			con = bds.getConnection();
			String sql = "select*from user_info";
			PreparedStatement ps = con.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				Map<String,String> user = new HashMap<String,String>();
				user.put("uiNum", rs.getString("ui_name"));
				user.put("uiName", rs.getString("ui_name"));
				user.put("uiId", rs.getString("ui_Id"));
				user.put("credat", rs.getString("credat"));
				user.put("cretime", rs.getString("cretim"));
				userList.add(user);	
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(con!=null) {
				try {
					con.close();
				} catch (SQLException e) {	
					e.printStackTrace();
				}
			}
		}
		
* userVO에서 타입알리아스를 사용하고 싶다면 mybati-config에서 타입알리아스 설정하면됨.



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. 스프링 프로젝트를 만들고 서버를 통해서 home에 잘 접속이 되는지 확인할 것.

2. pom.xml에 필요한 것들을 넣고 해당 프로젝트 update 할 것.

3. web.xml을 확인하고 listener와 init-param타는 것들을 확인할것
	a. root-context.xml : DBCon과 작성과 더불어 mybatis셋팅, 맵핑에 관련되어있는 xml 만들기.
	b. servlet-context.xml : ViewsController에서 했던 것들. <context : component-scan base-package="경로 잘 지정해주기"> 

4. com.sp.bdi에 Controller, Service, DAO, VO 작성하기

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

*conf, head ,common, config 있으면 가장먼저 볼 것! xml을 보면 모든셋팅들이 잘 들어가있음.


* <resources mapping="/res/**" location="/resources/" /> // WebContent(Web-inf는 접근 못하는 폴더였잖아. 이건아님.) 
	폴더 우리가 예전에 쓰던 공통적인 폴더. url로 따로 안타도 들어갈수 있었던 폴더. mapping은 우리가 줄여쓸수 있는 url

* 우리는 원래 return에 url로 태워서 보냈었다. 하지만 json기반으로 jsp에쏴줄땐? 데이터타입 앞에다가 @붙여주면됨.
	public @ResponseBody List<UserVO> getUserList(){
		return us.getUserVOList();

** 부가적으로 jackson library 추가가 필요함.
	}