1. 컴포넌트를 생성하면 app.module.ts에 자동으로 정보가 생성됨.
2. app-routing.module.ts에서 import해서 path를 지정해주기.
3. app.component.html에서 routerLink속성에 url로 작성하면 href역할처럼 페이지가 이동된다.


# 1 설치 및 셋팅 
	node.js, npm(node package manager)을 이용하여 앵귤러CLI설치, workspace project를 만듬, 웹브라우저를 띄움
		% npm install -g @angular/cli		// 앵귤러 설치
		% npm -v				// 앵귤러 버전확인
		% ng new angularPetlist		// 프로젝트 생성
		% cd angularPetlist			// 프로젝트 폴더 이동
		% ng serve --open			// 서버 실행

# 2 아키텍쳐
	모듈들에 대한 개념, 어떻게 설치되어있는지, 뷰와 로직을 보여주는 html, css, ts파일이 어떻게 컴포넌트를 구성하는지
	데이터바인딩(뷰와 로직간에 어떻게 작용하는지), 뷰와 서비스를 분리(디펜던시 인젝션)
	라우팅을 이용하여 화면과 화면을 이동할 수 있다.
		angular.json 	// 프로젝트의 메타(기본) 정보
		node_modules	// 여러가지 설치된 모듈들, CLI포함돼서
		
		src > index.html	// 서버킬때 화면
		        enviroment > enviroment.ts	// 환경변수나 상수들을 선언하여 사용
		src > app  > app.module.ts		// 우리가 사용하는 모듈들을 import시킴
			    app.component.ts	// 대표적인 로직들을 선언해주고 그 로직들을 사용하게 됨. index.html의 <app-root></app-root> 사이에 들어가게 됨. 
					     	   뷰를 나타내는 html은 어떤거다. 화면 css는 어떤거다 메타정보를 써줌.
			    app.component.html 	// ts에 있는 변수값들이 view에 보여짐.
			    app-routing.module.ts 	// 화면 ~로 이동하라.

# 3 라우팅(화면 네비게이션)
	* 우리가 컴포넌트로 뷰를 구성하는데 컴포넌트와 컴포넌트를 왔다갔다 할 수 있는 것을 라우팅 이라고 함.
	* 두개의 컴포넌트를 만들어서 홈, 아이템을 라우팅 테이블에 등록하여 화면을 왔다갔다.

	* app.module.ts에서 직접 라우터를 설정해줄 수 있고 별도에 파일에 라우트테이블에 대한 라우팅 정보를 저장하기도 함.
	@NgModule({
  		imports: [
    			BrowserModule,
    			ReactiveFormsModule,
			RouterModule.forRoot([
				{ path: '', component: ProductListComponent },		// 이러한 path로 url설정
				{ path: 'products/:productId', component: ProductDetatilsComponent },
  		],
	이것을 로직이나 주소창에서 
	<a [title]="product.name + ' details'" [routerLink]="['/products', productId]>	// 이렇게 사용하게된다.
		{{ product.name }}
	</a>

	% ng generate component home 	// html 폴더. component.css와 html화면 등등을 자동으로 만들어준다.
	% ng generate component item	// item 폴더
	* app-routing.module.ts	// 여기폴더의 const routes: Routes = [];에서 라우팅정보를 지정해줌으로써 컴포넌트 단위로 이동할 수 있는 것이다.
	
		import { HomeComponent } from './home/home.component';		// 먼저 만든 폴더들을  import해주고
		import { ItemComponent } from './item/item.component';

		const routes: Routes = [
  			{
			  	path: '',			// rootPath
			   	redirectTo: 'home',		// default component
			   	pathMatch: 'full'
			}
		  	{ path: 'home', component: HomeComponent },
		 	{ path: 'item', component: ItemComponent }
		];	// 이후 path에다 home이라고 하면 home component, item이라고하면 item component로 이동하는 것. 아무것도 없으면 위에 작성한대로 home으로 이동함.
		
	* app.component.html 	
		<nav>
  			<a routerLink="/home">List</a>	// 이렇게 라우터를 연결할 수 있다.
  			<a routerLink="/item">New</a>
		</nav>
		<router-outlet>안녕?</router-outlet>		// 위의 라우터들이 여기사이에 끼워져서 나옴
	
	* 이후 생성한 각 폴더의 html에 수정만해주면 화면과 로직을 분리해서 사용할 수 있게되는 것임.
# 4 라우팅 파라미터 
	화면을 옮길때 url로 파라미터 값을 넘길수 있는 것.
	* app-routing.module.ts
		const routes: Routes = [
  			{
			  	path: '',			// rootPath
			   	redirectTo: 'home',		// default component
			   	pathMatch: 'full'
			},
		  	{ path: 'home', component: HomeComponent },
		 	{ path: 'item', component: ItemComponent },
			{ path: 'item/:id', component: ItemComponent}	// 추가
		];

	* item.component.ts		// 여기서 파라미터값 설정
		import { ActivatedRoute, Router } from '@angular/router'; 		// 이것을 Router와 관련된 클래스들을 import하게되면 관련된 것들을 쓸 수 있음.

		export class ItemComponent implements OnInit {
 			private editable: boolean = false;
  			constructor(private route: ActivatedRoute,		// 생성자에 파라미터를 받아오는 방법. 위의 import된 것을 인자로 취급한다.
              				  private router: Router) { } 			// Defendancy Injection 방법이라고 할 수 있다.

  			ngOnInit(): void {
      			let id = this.route.snapshot.paramMap.get('id');		// app-routing.module.ts에서 정한 컴포넌트의 파라미터를 가져오는 방법

      			if(id) {
        				this.editable = true;
      			}
  		}

	  	saveItem() {
    			if(this.editable) { // 만약에 파라미터값이 있다면?
     			 	// Update
    			} else {
     				 // Create
    			}
  		}
	}



# 5 클래스 
	* 객체지향 프로그램. 앵귤러뿐만 아니라 뷰, 자바, 파이썬 등등.. 모든 컴포넌트는 클래스로 구성됨
	* item이란 클래스를 만든 후 여기에다가 데이터들을 넣어서 그걸 객체로 사용할 것임.
	* ng generate class classes/item 	// 클래스를 만드는 방법
	* item.ts
		export class Item {
   			id: string;
    			name: string;
    			available: boolean;
		}	// 작성이후
	* item.component.ts
		import { Item } from '../classes/item'; 	// import할 것!

		export class ItemComponent implements OnInit {
  			public item: Item;		// 클래스 불러오기
  			private editable: boolean = false;
  			constructor(private route: ActivatedRoute,
              				  private router: Router) { 
                				this.item = {	// 클래스를 초기화 구현
                 					id: '',
                  					name: '',
                 			 		available: true
                			}
              			} 

	* app.module.ts					// input 태그를 사용하기 위해 FormsModule을 추가해줘야 함.
		import { FormsModule } from '@angular/forms';	// 임포트
		  imports: [
    			FormsModule	// 추가


	* item.component.html
		<div>
    			<label>ID
        				<input [(ngModel)]="item.id" placeholder="ID"/>	// [(ngModel)]="item.id" 이것을 추가하는것이 투에이 바인딩이라고 함.
									// 컴포넌트의 값이 바로 변함
									// 반대로 컴포넌트의 값이 변하면 뷰의 값도 변한다.
    			</label>
		</div>
		<div>
    			<label>Name
        				<input [(ngModel)]="item.name" placeholder="Name"/>
    			</label>
		</div>
		<div>
    			<label>Available
        				<input [(ngModel)]="item.available" type="checkbox"/>
    			</label>
		</div>

		<button (click)="saveItem()">Save</button> 

# 6 모듈(필요한 컴포넌트(기능단위)의 모음)
	엔진모드를 기반, 앵귤러를 구성하는 모듈을 추가하고 사용하는 방법을 배움

	% npm install --save ngx-webstorage	// 앵귤러가 웹스토리지를 사용할 수 있도록하는 외부패키지를 설치함.

	* app.module.ts
		import { NgxWebstorageModule } from 'ngx-webstorage';
		imports: [
    			NgxWebstorageModule.forRoot(),
 		],

# 7 서비스구조
	MVC, 체계화된 서비스(앵귤러의 장점), 이를 이용한 디펜던시 인젝션.
	주방장은 주방일에만, 홀은 홀 관련된 일들만.
	로컬스토리지를 이용한 CRUD서비스

	% ng generate service services/item	// 여기서 CRUD를 구현할 것임. 
	* @Injectable 	// 서비스를 우리가 DI를 이용해서 다른 클래스에다가 inject를 하기 위한 데코레이터

# 8 데이터 바인딩**(앵귤러를 사용하는 이유)
	* 투에이(모듈>로직, 로직>모듈) 데이터바인딩이 어떻게 사용되는지, 로직이 있는 로직값이 어떻게 보여지는지,
	* 인풋받은 값을 엔진모델를 이용하여 어떻게 로직모델에 넣어주는가 

# 9 파이프
	* 데이터를 갖고왔는데 데이터자체는 바뀌지않지만 필요에 따라서 우리가 원하는 형태로 보여줄 수 있음.
	ex ) 갖고온 데이터를 uppercase로 대문자 표현
	* 기존에 있던 것과 더불어 커스텀해서 사용할 수도 있다.

	% ng generate pipe pipes/available 
	
# 10 스타일
	기본적인 css를 이용하여 꾸미기. 어떻게 반응형화면을 표현하는지.