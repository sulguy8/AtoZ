* RequestMapping
@Controller
@RequestMapping("/test")
public class TestController {
	
	@RequestMapping(value="/prac", method=RequestMethod.GET)
	public @ResponseBody Map<String,String> test(){
		Map<String,String> rMap = new HashMap<String,String>();
		return rMap;
	}
	
} // localhost/test/prac 하위 url까지 작성가능


* log4j.xml
	<!-- Application Loggers -->
	<logger name="com.sp.bdi">
		<level value="debug" />
	</logger>

* 아무때나 debug쓰는 것아님

* jsp에서 보내는 형태가 form태그(xxx-form-urlencodede), 파일이 있는 form태그(multi data), json인지 잘 구분해서 사용할 것.
** RequestBody // json 받을때. 이거는 "jackson"을 받아야지 됨. 
*** xhr.setRequestHeader('Content-Type','application/json'); json화 해줘야 payload! 즉,json은 payload형태로 보냄.
** test(@ModelAttribute UserVO param) // xxx-form-urlencodede Form 형태로 보내야 함

* test(@RequestParam Map<String,String> param) // Map같이 컴퓨터가 정한 참조형 타입일때

* test(@ModelAttribute UserVO param) // xxx-form-urlencodede Form 형태로 보내야 함. 우리가 임의로 정한 참조형 데이터 타입일때(@ModelAttribute 생략가능)

* jstl에서는 어쩔수 없이 메인 컨트롤러에서 페이지를 타서 동기화를 시켜야하지만, ajax기반에서는 공통적으로 받는 서블릿으로 페이지 이동시키는 게 편함.

* DEBUG: com.sp.bdi.dao.UserInfoMapper.selectUserInfoList - ==>  Preparing: select*from user_info // DEBUG로 단계를 낮춰줬기때문에 쿼리문도 보임.

* 태그, 속성, 아이디를 이용해서 script로 가져올수 있었다. 추가적으로 class도있는데 이거는 다음주에 배울거임.

* 체크박스는 or조건으로 해야돼서
where 
ui_id like '%gold%'
or
ui_id like '%gold%'
or
ui_id like '%gold%'


$ 쿼리문을 완성하는 형식
# 은 ?로 바인딩이 됨


			<foreach collection="search" item="col" seperator="or">  // seperator="or"는 ${col} like '%' || #{searchStr} || '%' 끝나고 or를 자동으로 붙여줌.
				${col} like '%' || #{searchStr} || '%'
			</foreach>
*pom.xml
<artifactId>bdi</artifactId> //  이게 컨텍스트 루트 디폴트값

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>

					<wtpContextName>/</wtpContextName>	// 이거 추가하고 메이븐업데이트하면 루트패스가 / 로 바뀜.
				</configuration>

@Model만 생략가능, @reqparam, @reqbody는 표기해줘야함.

* 원래 form태그방식으로 model받을수 있는데 json방식으로는 requestbody로 받아야함.

* select(단일), update와 delete는 보통 pk값을 받음.

* dbcp가 알아서 커밋해줌

* td.innerHTML = brd[0][key]; // view.jsp 여기는 노드리스트로 받기때문에 방번호가 필요했었음..

* url 패턴과 주는 것과 받는 방식 잘 구분해야함!

* delete를 배열형태로 uiNums을 받아서 여러개 삭제해보기


* userdaoimpl
public int deleteUserInfos(UserVO user){
	SqlSession ss = ssf.openSession(false);
	try{
		int cnt = ss.delete("com.sp.bdi.dao.UserInfoMapper.deleteUserInfo", user);
		if(cnt!=user.getUiNums().length){
			ss.rollback();
			return 0 ;
		}
		ss.commit();
		return cnt;
	} catch(Exception e){
	