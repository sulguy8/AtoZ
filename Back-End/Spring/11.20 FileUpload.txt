* 파일 업로드(I/O)
인풋(보냄) 아웃풋(받음)
클라이언트     >   서버   >	클라이언트
인풋 	      받음	보냄	아웃풋

웹 퍼블리셔

* 자바는 유니코드 기반이라 char는 2byte

* FileInputStream 는 1바이트, 즉 바이트기반. 따라서 2바이트인 한글로 읽으려고 하면 문제가 생김.

* FileInputStream fis = new FileInputStream(path); // 내가 임의로 강요하는 파일에 대한 다양한 변수가 있기때문에 이셉션을 강요함.

* int s = fis.read(); // 이걸 할때마다 1번씩 뽑아옴. 마지막은 -1. 따라서 while문으로 돌려서 -1이 충족이된다면 끝을 알 수 있음.

* FileInputStream 파일로부터 가져와서 스트림형식으로 만들어주고! 얘는 하나하나 읽기만함 따라서 UTF-8로 짜줄수 있는 보조스트림이 필요함!  
  InputStreamReader isr = new InputStreamReader(fis,"utf-8"); 이것! 하지만 한글자씩 읽을건 아니니까!
  BufferedReader br = new BufferedReader(isr); // 따라서 뭉탱이로 읽기위해 이것이 필요! 니가 읽고 Line에 가치가 생기면 넘겨줘! 이게없으면 비트별로 쪼개서 하나하나 추가해야함.
	// 여기까지가 인풋을 한것! 

** 그래서 Line을 읽어서 null이 아니라면 str을 보여줘!
while ((str=br.readLine())!= null) 
System.out.println(str);
}	

* notePad++ 다운받아서 인코딩 UTF-8(BOM없음)으로 변환할 것.

* 			
FileOutputStream fos= new FileOutputStream(tPath);
OutputStreamWriter osw = new OutputStreamWriter(fos,"UTF-8");
BufferedWriter bw = new BufferedWriter(osw);
bw.write(string);
bw.flush(); 
 // test1.txt라는파일이 생김. 우리가 input했던거 반대로 해버리는 거임. 우리는 지금까지 파일만 안만들었지 PrintWriter()로 활용해왔음

* int memSize = 1024 * 1024*5; //5MB


		int memSize = 1024 * 1024*5; 
		int totalSize = 1024 * 1024 * 50; 
		int fileSize = 1024 * 1024 * 10;
		DiskFileItemFactory dfif = new DiskFileItemFactory();
		dfif.setSizeThreshold(memSize); // 서버와 동시접속자수 등을 생각하고 만들어야함. 100명것이 한번에 쓰레드로 동작하기때문에 남는 여유공간이 요청메모리보다 적다면 힌메모리 이셉션을 내버리고 JVM을꺼버림 
		dfif.setRepository(new File(System.getProperty("java.io.tmpdir")));
		ServletFileUpload sfu = new ServletFileUpload(dfif);
		sfu.setFileSizeMax(fileSize);  // 개당 사이즈 따라서 개별사이즈중에 초과하는게 있으면 안됨!
		sfu.setSizeMax(totalSize);     // 총 사이즈 따라서 개별사이즈들의 합이 총사이즈를 초과하면 안됨!

토렌트 p2p 형식으로 연상하면 쉬움.


		ServletFileUpload sfu = new ServletFileUpload(dfif);

enctype="multipart/from-data"> 못찾겠으면 arc에서 보면됨
app/json
app/xml


* 톰캣은 예전버전으로 받아오기힘들기 때문에 commons-fileupload 메이븐에서 받을 것.
<dependency>
	<groupId>commons-fileupload</groupId>
	<artifactId>commons-fileupload</artifactId>
	<version>1.4</version>
</dependency>

* <form method="POST" action="/file" enctype="multipart/form-data"> 파일보낼때 이걸로 통해서 보내야 된다!

* 위의 태그로는 request.getParameter로 아이디를 받아오지 못하기 때문에 servlet에서 아래와 같은 방식으로 받아와야한다.
if (ServletFileUpload.isMultipartContent(request)) {
	try {
		List<FileItem> fList = sfu.parseRequest(request);
		for (FileItem fi : fList) {
			System.out.println(fi.isFormField()); 이렇게 하면 파일에서 받아오는 것들은 false, 나머지 것들은 true가 뜬다.
			System.out.println(fi.getFieldName());
		}
	} catch (FileUploadException e) {
		e.printStackTrace();
			}

* 우리가 다운받을때 여러사람들중에 파일이름의 중복이 있을 수 있기때문에 서버에서는 나노타임으로 나눠서 저장한다.
하지만 우리 DB에서는 그이름이 남아있어서 막상 서버에서 받으려면 이름이 다른데 , 이는 우리가 이름을 서버꺼, DB꺼로 나눠서 두개로 저장하기 때문이다.

* String key = fi.getFieldName();   // String fileName = fi.getName(); // 두개 차이를 알것! 키와 밸류

* 만약에 인서트만 잘되고 파일저장이 제대로 안될땐? 롤백과 삭제가 "컨트롤러"가 아닌 "서비스"에서 같이 이뤄줘야함.

* 맵으로 만들면 걍 스트링이면 문제가없는데 파일들은 좀바꿔줘야함 2개는 String, 파일은 file로 캐스팅해줘야함.
			String ftName = (String)param.get("ftName");
			String ftId = (String)param.get("ftId");
			FileItem fi = (FileItem)param.get("ftFile");

* fi.write(targetFile); // write에 커서올려보면 알겟지만 이셉션을 강요함. 따라서 굳이 이셉션안해줘도됨.

* 하나의 트랜젝션(ex//인서트,인서트,딜리트를 한번에 묶는것)으로 묶어서 하나라도 실패하면 롤백하는 것이 합리적임.
 