* @Controller 에서 @PostMapping일때 @Controller는 JSON형태를 쓸수 없어서 payload형태가 아닌 jsp에서 body형태로 태워서 보내야 한다.

* @Autowired는 spring아니면 안먹음. 하지만 @Resource는 javax것이기 때문에 스프링 프레임워크와 관계없이 범용적으로 사용가능하다.

*
	@GetMapping("tests")
	public String getTestInfoList(@ModelAttribute TestInfoVO test, HttpServletRequest request) {
		request.setAttribute("rMap",tiService.selectTestInfoList(test));
		return "/views/test/list";
	}

	@GetMapping("tests")
	public String getTestInfoList(@ModelAttribute TestInfoVO test, Model m) {    // 둘다 가능하지만 스프링에선 이렇게 쓰는 것이 더 자연스럽다.
		m.addAttribute("rMap",tiService.selectTestInfoList(test));
		return "/views/test/list";


* springboot 프로젝트만들때 webapp폴더와 WEB-INF폴더를 만들어줘야 jsp페이지들을 사용할 수 있다. (webapp과 WEB-INF는 정해져있는것이기 때문에 다른이름은 안됨!)

*
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.pool-name=hikaricp
spring.datasource.hikari.maximum-pool-size=5 // 5명까지 늘어날 수 있음.
spring.datasource.hikari.minimum-idle=3 // 상담원 3명
spring.datasource.hikari.idle-timeout=30000 // 30초

* 쓰레드는 밥먹으면서 티비보는 것.
t1.start(); // start()가 실행될때 run()메서드가 실행됨.

* @PathVariable url의 파라미터값을 가져온다. 
	@GetMapping("/horse/{name}/{speed}")
	public int getWhich(@PathVariable("name") String name1, @PathVariable("speed") String name2) { 
		log.info("name=>{}", name);
		return 1;
	}

* @RequestParam이랑 @PathVariable는 비슷하지만 쓰이는 용도가 다르다. 패쓰베리어블은 rest의 성격이 더 강함.

