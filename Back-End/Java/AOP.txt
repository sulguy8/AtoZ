* 필터와 aop는 역할은 비슷한데 개념은 살짝 다름. aop가 필터와 객체사이에 살짝?걸쳐있는정도

* @Aspect가 있어야 @Before가 됨 그리고 @Component가 있어야 메모리 생성

* 2019-12-26 16:14:43.811  INFO 4768 --- [p-nio-80-exec-4] com.bdi.sb.aop.LogAOP                    : join point=>execution(String com.bdi.sb.controller.ViewController.home())
// join point는 매서드 실행되기 전후에 aop넣기위해 사용되는 것.

* AOP(관점지향)은 OOP(객체지향)의 완성형이라 할 수 있따.

* AOP에 총 5개의 @가 있음
before > around > 메서드 실행 > around > after 순으로 진행됨. 따라서 이 세가지는 꼭 알아둘 것.
@after
@before
@arround

@after return
@after throwing


@Component
@Aspect
@Slf4j
public class LogAOP {
	@Before("execution(* com.bdi.sb.controller..*())")
	public void before(JoinPoint jp) {
		log.info("join point=>{}", jp);
	}
	@After("execution(* com.bdi.sb.controller..*())")
	public void after(JoinPoint jp) {
		log.info("난 메서드가 실행된 뒤에 실행됨~");
	}
	@Around("execution(* com.bdi.sb.controller..*())")
	public Object around(ProceedingJoinPoint pjp) throws Throwable {
		log.info("ProceedingJoinPoint=>{}", pjp);
		Object ojb = pjp.proceed();
		return ojb; // null로하면 화면에 아무것도 안뜸.
	}
}

* private는 proxy 구현이 안됨.

* <beans:ref bean ="sessionInterceptor"/> 원래 SessionInterceptor.java이기때문에 대문자 S로 시작해야하지만 @component 뒤에 ("~~") 없기때문에 소문자가 가능

* 필터와 aop는 역할은 비슷한데 개념은 살짝 다름. aop가 필터와 객체사이에 살짝?걸쳐있는정도

* 예전처럼 jspf에다가 할 수 도있는데 세션이 만료가 되어있어도 백엔드에 접근이 가능하기 때문에(uiNum을 읽을 수 없음) interceptor를 사용해야 한다.

* servlet-context에다가 추가해줄 것.			
	<mvc:exclude-mapping path="/views/user/login"/>
	<mvc:exclude-mapping path="/login"/>